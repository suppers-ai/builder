name: Sorted Storage Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "applications/sorted-storage/**"
      - "packages/shared/**"
      - "packages/ui-lib/**"
      - "packages/auth-client/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "applications/sorted-storage/**"
      - "packages/shared/**"
      - "packages/ui-lib/**"
      - "packages/auth-client/**"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        deno-version: [2.4.2]
        test-category: [unit, integration, e2e]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json', '**/deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Install dependencies
        working-directory: applications/sorted-storage
        run: deno cache --reload main.ts dev.ts test-runner.ts

      - name: Run linting
        working-directory: applications/sorted-storage
        run: deno task lint

      - name: Run formatting check
        working-directory: applications/sorted-storage
        run: deno task fmt:check

      - name: Run type checking
        working-directory: applications/sorted-storage
        run: deno task check

      - name: Run tests
        working-directory: applications/sorted-storage
        run: deno task test:${{ matrix.test-category }} --coverage --verbose

      - name: Upload coverage reports
        if: matrix.test-category == 'unit'
        uses: codecov/codecov-action@v4
        with:
          directory: applications/sorted-storage/coverage
          flags: sorted-storage
          name: sorted-storage-coverage

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: 2.4.2

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json', '**/deno.lock') }}

      - name: Install dependencies
        working-directory: applications/sorted-storage
        run: deno cache --reload main.ts dev.ts test-runner.ts

      - name: Run performance tests
        working-directory: applications/sorted-storage
        run: deno task test:performance --verbose

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: applications/sorted-storage/performance-results.json

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: 2.4.2

      - name: Run security audit
        working-directory: applications/sorted-storage
        run: |
          # Check for known vulnerabilities in dependencies
          deno info --json main.ts | jq '.modules[].specifier' | grep -E '^https?://' | sort -u > deps.txt
          echo "External dependencies:"
          cat deps.txt

      - name: Check for sensitive data
        run: |
          # Basic check for potential secrets
          if grep -r -E "(password|secret|key|token).*=" applications/sorted-storage/ --exclude-dir=node_modules --exclude="*.test.*" --exclude="test-*"; then
            echo "⚠️  Potential sensitive data found"
            exit 1
          else
            echo "✅ No obvious sensitive data found"
          fi
