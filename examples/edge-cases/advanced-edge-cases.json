{
  "metadata": {
    "name": "advanced-edge-cases",
    "version": "1.0.0-beta.1",
    "description": "Advanced edge cases for thorough validation testing",
    "author": "JSON App Compiler",
    "license": "MIT",
    "extraField": "This field is not in the schema"
  },
  "components": [
    {
      "id": "componentWithExtremelyDeepNesting",
      "type": "Layout",
      "props": {
        "variant": "default",
        "padding": "md"
      },
      "children": [
        {
          "id": "level1",
          "type": "Card",
          "props": {
            "variant": "default",
            "padding": "md"
          },
          "children": [
            {
              "id": "level2",
              "type": "Layout",
              "props": {
                "variant": "default",
                "padding": "sm"
              },
              "children": [
                {
                  "id": "level3",
                  "type": "Card",
                  "props": {
                    "variant": "default",
                    "padding": "xs"
                  },
                  "children": [
                    {
                      "id": "level4",
                      "type": "Layout",
                      "props": {
                        "variant": "default",
                        "padding": "xs"
                      },
                      "children": [
                        {
                          "id": "level5",
                          "type": "Card",
                          "props": {
                            "variant": "default",
                            "padding": "xs"
                          },
                          "children": [
                            {
                              "id": "level6",
                              "type": "Layout",
                              "props": {
                                "variant": "default",
                                "padding": "xs"
                              },
                              "children": [
                                {
                                  "id": "level7",
                                  "type": "Button",
                                  "props": {
                                    "variant": "primary",
                                    "size": "sm"
                                  },
                                  "children": "Extremely deep nesting"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "componentWithMixedTypeChildren",
      "type": "Layout",
      "props": {
        "variant": "default",
        "padding": "md"
      },
      "children": [
        "Text node as first child",
        {
          "id": "objectChild",
          "type": "Button",
          "props": {
            "variant": "primary",
            "size": "md"
          },
          "children": "Button after text"
        },
        123,
        true,
        null,
        {
          "id": "anotherObjectChild",
          "type": "Card",
          "props": {
            "variant": "default",
            "padding": "md"
          },
          "children": "Card after non-object values"
        }
      ]
    },
    {
      "id": "componentWithInvalidProps",
      "type": "Input",
      "props": {
        "type": "text",
        "label": 12345,
        "placeholder": true,
        "required": "not-a-boolean",
        "min": "not-a-number",
        "max": "not-a-number",
        "pattern": 12345
      }
    },
    {
      "id": "componentWithDuplicateId",
      "type": "Button",
      "props": {
        "variant": "primary",
        "size": "md"
      },
      "children": "First component with this ID"
    },
    {
      "id": "componentWithDuplicateId",
      "type": "Card",
      "props": {
        "variant": "default",
        "padding": "md"
      },
      "children": "Second component with the same ID"
    },
    {
      "id": "componentWithEmptyId",
      "type": "Button",
      "props": {
        "variant": "primary",
        "size": "md"
      },
      "children": "This component has an empty ID"
    },
    {
      "id": "",
      "type": "Button",
      "props": {
        "variant": "primary",
        "size": "md"
      },
      "children": "This component has an empty ID"
    },
    {
      "id": "componentWithSpecialChars!@#$%^&*()",
      "type": "Button",
      "props": {
        "variant": "primary",
        "size": "md"
      },
      "children": "This component has special characters in its ID"
    },
    {
      "id": "componentWithNoChildren",
      "type": "Layout",
      "props": {
        "variant": "default",
        "padding": "md"
      }
    },
    {
      "id": "componentWithNullChildren",
      "type": "Layout",
      "props": {
        "variant": "default",
        "padding": "md"
      },
      "children": null
    },
    {
      "id": "componentWithUndefinedChildren",
      "type": "Layout",
      "props": {
        "variant": "default",
        "padding": "md"
      },
      "children": undefined
    }
  ],
  "routes": [
    {
      "path": "/path-with-special-chars/{param}",
      "component": "componentWithDuplicateId",
      "meta": {
        "title": "Route with special chars",
        "description": "This route has special characters in its path"
      }
    },
    {
      "path": "/extremely/deep/nested/route/path/that/might/cause/issues",
      "component": "componentWithMixedTypeChildren",
      "meta": {
        "title": "Extremely deep route path",
        "description": "This route has an extremely deep path"
      }
    },
    {
      "path": "/route-with-invalid-component",
      "component": "nonExistentComponent",
      "meta": {
        "title": "Invalid Component Reference",
        "description": "This route references a component that doesn't exist"
      }
    },
    {
      "path": "/route-with-invalid-layout",
      "component": "componentWithNoChildren",
      "layout": "nonExistentLayout",
      "meta": {
        "title": "Invalid Layout Reference",
        "description": "This route references a layout that doesn't exist"
      }
    },
    {
      "path": "/route-with-empty-path",
      "component": "componentWithNoChildren",
      "meta": {
        "title": "Empty Path",
        "description": "This route has an empty path"
      }
    },
    {
      "path": "",
      "component": "componentWithNoChildren",
      "meta": {
        "title": "Empty Path",
        "description": "This route has an empty path"
      }
    },
    {
      "path": "/route-with-invalid-middleware",
      "component": "componentWithNoChildren",
      "middleware": ["nonExistentMiddleware", 123, null, true],
      "meta": {
        "title": "Invalid Middleware",
        "description": "This route has invalid middleware references"
      }
    },
    {
      "path": "/route-with-invalid-meta",
      "component": "componentWithNoChildren",
      "meta": {
        "title": 12345,
        "description": true,
        "invalidMetaField": {
          "nestedObject": "This shouldn't be allowed"
        }
      }
    }
  ],
  "api": {
    "endpoints": [
      {
        "path": "/api/endpoint-with-invalid-methods",
        "methods": ["GET", "POST", "INVALID_METHOD", 123, null],
        "handler": "InvalidMethodHandler"
      },
      {
        "path": "/api/endpoint-with-empty-methods",
        "methods": [],
        "handler": "EmptyMethodsHandler"
      },
      {
        "path": "/api/endpoint-with-no-methods",
        "handler": "NoMethodsHandler"
      },
      {
        "path": "/api/endpoint-with-invalid-handler",
        "methods": ["GET"],
        "handler": 12345
      },
      {
        "path": "/api/endpoint-with-empty-handler",
        "methods": ["GET"],
        "handler": ""
      },
      {
        "path": "/api/endpoint-with-no-handler",
        "methods": ["GET"]
      },
      {
        "path": "/api/endpoint-with-complex-validation",
        "methods": ["POST"],
        "handler": "ComplexValidationHandler",
        "validation": {
          "body": {
            "nestedObject": {
              "type": "object",
              "properties": {
                "deeplyNestedField": {
                  "type": "string",
                  "pattern": "^[a-z]+$"
                }
              }
            },
            "arrayField": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "query": {
            "filter": {
              "type": "string",
              "enum": ["active", "inactive", "all"]
            },
            "page": {
              "type": "number",
              "min": 1
            }
          },
          "params": {
            "id": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        }
      },
      {
        "path": "/api/endpoint-with-circular-reference",
        "methods": ["GET"],
        "handler": "CircularReferenceHandler",
        "middleware": ["selfReferencingMiddleware"]
      }
    ],
    "middleware": [
      {
        "name": "selfReferencingMiddleware",
        "config": {
          "dependsOn": "selfReferencingMiddleware"
        },
        "order": 0
      },
      {
        "name": "middlewareWithInvalidConfig",
        "config": {
          "timeout": "not-a-number",
          "maxRetries": "not-a-number",
          "enabled": "not-a-boolean"
        },
        "order": "not-a-number"
      },
      {
        "name": 12345,
        "order": 2
      },
      {
        "name": "",
        "order": 3
      }
    ],
    "auth": {
      "provider": "custom",
      "config": {
        "secret": 12345,
        "expiresIn": true,
        "algorithm": 12345
      },
      "routes": {
        "login": 12345,
        "logout": true,
        "register": null
      }
    },
    "cors": {
      "origin": 12345,
      "methods": ["GET", "POST", "INVALID_METHOD"],
      "allowedHeaders": [12345, true, null],
      "credentials": "not-a-boolean"
    }
  },
  "theme": {
    "primaryColor": "",
    "secondaryColor": null,
    "fontFamily": 12345,
    "spacing": {
      "xs": "not-a-valid-size",
      "sm": -10,
      "md": null,
      "lg": true,
      "xl": {
        "nestedObject": "This shouldn't be allowed"
      }
    },
    "breakpoints": {
      "sm": -100,
      "md": "not-a-valid-size",
      "lg": null,
      "xl": true,
      "2xl": {
        "nestedObject": "This shouldn't be allowed"
      }
    },
    "customProperties": {
      "--valid-property": "10px",
      "--invalid-property": {
        "nestedObject": "This shouldn't be allowed"
      },
      "invalid-property-no-dashes": "10px"
    }
  },
  "build": {
    "target": 12345,
    "minify": "not-a-boolean",
    "sourceMaps": "not-a-boolean",
    "outputDir": 12345,
    "publicPath": 12345
  }
}