name: Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  DOCKER_BUILDKIT: 1
  NODE_VERSION: '20'

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine environment
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: prepare
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/sortedstorage:${{ needs.prepare.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/sortedstorage:${{ needs.prepare.outputs.environment }}
            ${{ steps.login-ecr.outputs.registry }}/sortedstorage:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ needs.prepare.outputs.version }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Terraform Init
        working-directory: ./infrastructure
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.prepare.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}"
      
      - name: Terraform Plan
        working-directory: ./infrastructure
        run: |
          terraform plan \
            -var="environment=${{ needs.prepare.outputs.environment }}" \
            -var="image_tag=${{ needs.prepare.outputs.version }}" \
            -out=tfplan
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        working-directory: ./infrastructure
        run: terraform apply -auto-approve tfplan

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push, deploy-infrastructure]
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster sortedstorage-${{ needs.prepare.outputs.environment }} \
            --service sortedstorage-app \
            --force-new-deployment \
            --desired-count 2
      
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster sortedstorage-${{ needs.prepare.outputs.environment }} \
            --services sortedstorage-app
      
      - name: Run smoke tests
        run: |
          ./scripts/smoke-test.sh ${{ vars.APP_URL }}

  rollback:
    name: Rollback if Failed
    runs-on: ubuntu-latest
    needs: [prepare, deploy-application]
    if: failure()
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Rollback deployment
        run: |
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster sortedstorage-${{ needs.prepare.outputs.environment }} \
            --services sortedstorage-app \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)
          
          aws ecs update-service \
            --cluster sortedstorage-${{ needs.prepare.outputs.environment }} \
            --service sortedstorage-app \
            --task-definition $PREVIOUS_TASK_DEF
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "ðŸ”´ Deployment rolled back",
              attachments: [{
                color: 'danger',
                text: `Deployment to ${{ needs.prepare.outputs.environment }} failed and was rolled back.\nVersion: ${{ needs.prepare.outputs.version }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [prepare, deploy-application]
    if: success()
    steps:
      - name: Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "âœ… Deployment successful",
              attachments: [{
                color: 'good',
                text: `Successfully deployed to ${{ needs.prepare.outputs.environment }}!\nVersion: ${{ needs.prepare.outputs.version }}\nURL: ${{ vars.APP_URL }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}