version: '3.8'

services:
  # SortedStorage Frontend with Nginx
  sortedstorage:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: sortedstorage
    restart: always
    ports:
      - "${PORT:-80}:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL:-https://api.sortedstorage.com}
      - VITE_WS_URL=${VITE_WS_URL:-wss://api.sortedstorage.com}
      - VITE_APP_URL=${VITE_APP_URL:-https://sortedstorage.com}
    depends_on:
      solobase:
        condition: service_healthy
    networks:
      - storage-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-enabled:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - sortedstorage
      - solobase
    networks:
      - storage-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Solobase Backend
  solobase:
    image: ${DOCKER_REGISTRY:-}solobase:${IMAGE_TAG:-latest}
    container_name: solobase
    restart: always
    environment:
      - DATABASE_TYPE=postgres
      - DATABASE_URL=postgresql://solobase:${DB_PASSWORD}@postgres:5432/solobase?sslmode=require
      - DEFAULT_ADMIN_EMAIL=${ADMIN_EMAIL:-admin@sortedstorage.com}
      - DEFAULT_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - STORAGE_TYPE=${STORAGE_TYPE:-s3}
      - STORAGE_S3_BUCKET=${S3_BUCKET}
      - STORAGE_S3_REGION=${S3_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://sortedstorage.com}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM:-noreply@sortedstorage.com}
    volumes:
      - solobase-data:/data
    networks:
      - storage-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_DB=solobase
      - POSTGRES_USER=solobase
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - storage-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U solobase"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - storage-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service
  backup:
    image: alpine:latest
    container_name: backup
    restart: always
    volumes:
      - postgres-data:/postgres-data:ro
      - solobase-data:/solobase-data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: ["/bin/sh", "-c"]
    command: ["while true; do /backup.sh; sleep 86400; done"]
    networks:
      - storage-network
    depends_on:
      - postgres
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  storage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  solobase-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-cache:
    driver: local