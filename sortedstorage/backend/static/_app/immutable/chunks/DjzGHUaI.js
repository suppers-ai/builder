class d{constructor(){this.token=null,this.baseURL=""}setToken(e){this.token=e}async request(e,s={}){const n={"Content-Type":"application/json",...s.headers};this.token&&(n.Authorization=`Bearer ${this.token}`);const r=await fetch(`${this.baseURL}${e}`,{...s,headers:n});if(!r.ok){const o=await r.json().catch(()=>({message:r.statusText}));throw new Error(o.message||`HTTP error! status: ${r.status}`)}return r.json()}async get(e){return this.request(e)}async post(e,s){return this.request(e,{method:"POST",body:s?JSON.stringify(s):void 0})}async put(e,s){return this.request(e,{method:"PUT",body:s?JSON.stringify(s):void 0})}async delete(e){return this.request(e,{method:"DELETE"})}async upload(e,s,n){return new Promise((r,o)=>{const t=new XMLHttpRequest,i=new FormData;i.append("file",s),n&&t.upload.addEventListener("progress",a=>{if(a.lengthComputable){const u=a.loaded/a.total*100;n(u)}}),t.addEventListener("load",()=>{if(t.status>=200&&t.status<300)try{r(JSON.parse(t.responseText))}catch{r(t.responseText)}else o(new Error(`Upload failed: ${t.statusText}`))}),t.addEventListener("error",()=>{o(new Error("Upload failed"))}),t.open("POST",`${this.baseURL}${e}`),this.token&&t.setRequestHeader("Authorization",`Bearer ${this.token}`),t.send(i)})}}const c=new d;export{c as a};
