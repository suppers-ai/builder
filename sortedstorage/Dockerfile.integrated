# Multi-stage build for SortedStorage with integrated backend

# Stage 1: Build frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy source code
COPY . .

# Build SvelteKit app
RUN npm run build

# Stage 2: Build Go backend with embedded frontend
FROM golang:1.23-alpine AS backend-builder

# Install build dependencies
RUN apk add --no-cache gcc musl-dev sqlite-dev

WORKDIR /build

# Copy backend code
COPY backend/go.mod backend/go.sum ./
COPY backend/*.go ./

# Copy Solobase and packages (adjust paths as needed)
COPY ../go/solobase /go/solobase
COPY ../go/packages /go/packages

# Copy built frontend from previous stage
COPY --from=frontend-builder /app/build ./build

# Download dependencies
RUN go mod download

# Build the binary with embedded frontend
RUN CGO_ENABLED=1 go build -o sortedstorage-server .

# Stage 3: Final minimal image
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata sqlite

WORKDIR /app

# Copy binary from builder
COPY --from=backend-builder /build/sortedstorage-server .

# Create necessary directories
RUN mkdir -p /app/storage /app/data

# Set environment variables
ENV PORT=3000 \
    DATABASE_TYPE=sqlite \
    DATABASE_URL=file:/app/data/sortedstorage.db \
    STORAGE_TYPE=local \
    STORAGE_PATH=/app/storage

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# Run the server
CMD ["./sortedstorage-server"]