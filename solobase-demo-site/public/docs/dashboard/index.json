[{"content":"Authentication API The Authentication API provides endpoints for user login, registration, password management, and token validation. All authentication uses JWT tokens for stateless authentication.\nBase URL All authentication endpoints are available under:\nhttps://your-solobase-instance.com/api/auth Authentication Flow Login: Exchange credentials for JWT token Use Token: Include token in Authorization header for API requests Refresh: Get new token before expiration Logout: Invalidate token (optional) Endpoints POST /login Authenticate a user and receive a JWT token.\nRequest 1 2 3 4 5 6 7 POST /api/auth/login Content-Type: application/json { \"email\": \"user@example.com\", \"password\": \"password123\" } Response Success (200 OK)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"success\": true, \"data\": { \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\", \"refresh_token\": \"rt_1234567890abcdef\", \"expires_in\": 3600, \"user\": { \"id\": 1, \"email\": \"user@example.com\", \"name\": \"John Doe\", \"role\": \"user\", \"created_at\": \"2024-01-15T10:30:00Z\", \"last_login\": \"2024-01-15T14:30:00Z\" } } } Error (401 Unauthorized)\n1 2 3 4 5 6 7 { \"success\": false, \"error\": { \"code\": \"INVALID_CREDENTIALS\", \"message\": \"Invalid email or password\" } } Error (429 Too Many Requests)\n1 2 3 4 5 6 7 8 { \"success\": false, \"error\": { \"code\": \"RATE_LIMITED\", \"message\": \"Too many login attempts. Try again in 15 minutes.\", \"retry_after\": 900 } } Example 1 2 3 4 5 6 curl -X POST https://api.solobase.dev/api/auth/login \\ -H \"Content-Type: application/json\" \\ -d '{ \"email\": \"admin@example.com\", \"password\": \"secure123\" }' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // JavaScript/Node.js const response = await fetch('/api/auth/login', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ email: 'user@example.com', password: 'password123' }) }); const data = await response.json(); if (data.success) { localStorage.setItem('token', data.data.token); } 1 2 3 4 5 6 7 8 9 10 11 # Python import requests response = requests.post('https://api.solobase.dev/api/auth/login', json={ 'email': 'user@example.com', 'password': 'password123' }) if response.status_code == 200: data = response.json() token = data['data']['token'] POST /register Register a new user account.\nRequest 1 2 3 4 5 6 7 8 9 POST /api/auth/register Content-Type: application/json { \"name\": \"John Doe\", \"email\": \"john@example.com\", \"password\": \"secure_password_123\", \"password_confirmation\": \"secure_password_123\" } Response Success (201 Created)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"success\": true, \"data\": { \"user\": { \"id\": 2, \"name\": \"John Doe\", \"email\": \"john@example.com\", \"role\": \"user\", \"created_at\": \"2024-01-15T15:30:00Z\", \"email_verified\": false }, \"message\": \"Registration successful. Please check your email to verify your account.\" } } Error (422 Unprocessable Entity)\n1 2 3 4 5 6 7 8 9 10 11 { \"success\": false, \"error\": { \"code\": \"VALIDATION_ERROR\", \"message\": \"Validation failed\", \"details\": { \"email\": [\"Email already exists\"], \"password\": [\"Password must be at least 8 characters\"] } } } Example 1 2 3 4 5 6 7 8 curl -X POST https://api.solobase.dev/api/auth/register \\ -H \"Content-Type: application/json\" \\ -d '{ \"name\": \"Jane Smith\", \"email\": \"jane@example.com\", \"password\": \"secure123\", \"password_confirmation\": \"secure123\" }' POST /refresh Refresh an expired or expiring JWT token.\nRequest 1 2 3 4 5 6 POST /api/auth/refresh Content-Type: application/json { \"refresh_token\": \"rt_1234567890abcdef\" } Response Success (200 OK)\n1 2 3 4 5 6 7 { \"success\": true, \"data\": { \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\", \"expires_in\": 3600 } } GET /me Get current user information.\nRequest 1 2 GET /api/auth/me Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... Response Success (200 OK)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"success\": true, \"data\": { \"user\": { \"id\": 1, \"name\": \"John Doe\", \"email\": \"john@example.com\", \"role\": \"admin\", \"permissions\": [\"read\", \"write\", \"delete\", \"admin\"], \"created_at\": \"2024-01-01T00:00:00Z\", \"last_login\": \"2024-01-15T14:30:00Z\", \"email_verified\": true } } } PUT /me Update current user profile.\nRequest 1 2 3 4 5 6 7 8 PUT /api/auth/me Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... Content-Type: application/json { \"name\": \"John Smith\", \"email\": \"johnsmith@example.com\" } Response Success (200 OK)\n1 2 3 4 5 6 7 8 9 10 11 12 13 { \"success\": true, \"data\": { \"user\": { \"id\": 1, \"name\": \"John Smith\", \"email\": \"johnsmith@example.com\", \"role\": \"admin\", \"created_at\": \"2024-01-01T00:00:00Z\", \"updated_at\": \"2024-01-15T15:45:00Z\" } } } POST /change-password Change user password.\nRequest 1 2 3 4 5 6 7 8 9 POST /api/auth/change-password Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... Content-Type: application/json { \"current_password\": \"old_password\", \"new_password\": \"new_secure_password\", \"new_password_confirmation\": \"new_secure_password\" } Response Success (200 OK)\n1 2 3 4 5 6 { \"success\": true, \"data\": { \"message\": \"Password changed successfully\" } } POST /forgot-password Request password reset email.\nRequest 1 2 3 4 5 6 POST /api/auth/forgot-password Content-Type: application/json { \"email\": \"user@example.com\" } Response Success (200 OK)\n1 2 3 4 5 6 { \"success\": true, \"data\": { \"message\": \"Password reset email sent if account exists\" } } POST /reset-password Reset password using token from email.\nRequest 1 2 3 4 5 6 7 8 POST /api/auth/reset-password Content-Type: application/json { \"token\": \"reset_token_from_email\", \"password\": \"new_password\", \"password_confirmation\": \"new_password\" } POST /logout Logout and invalidate token (optional - tokens expire automatically).\nRequest 1 2 POST /api/auth/logout Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... Response Success (200 OK)\n1 2 3 4 5 6 { \"success\": true, \"data\": { \"message\": \"Logged out successfully\" } } Using JWT Tokens Including Tokens in Requests Include the JWT token in the Authorization header:\n1 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... Token Structure JWT tokens contain three parts separated by dots:\nheader.payload.signature The payload contains:\n1 2 3 4 5 6 7 8 { \"sub\": \"1\", // User ID \"email\": \"user@example.com\", \"role\": \"admin\", \"permissions\": [\"read\", \"write\", \"admin\"], \"iat\": 1642248600, // Issued at \"exp\": 1642252200 // Expires at } Token Expiration Access tokens: Expire in 1 hour by default Refresh tokens: Expire in 30 days by default Use refresh tokens to get new access tokens Error Codes Code HTTP Status Description INVALID_CREDENTIALS 401 Wrong email or password TOKEN_EXPIRED 401 JWT token has expired TOKEN_INVALID 401 JWT token is malformed or invalid USER_NOT_FOUND 404 User account doesn’t exist EMAIL_NOT_VERIFIED 403 Email address not verified ACCOUNT_LOCKED 423 Account locked due to failed attempts RATE_LIMITED 429 Too many requests VALIDATION_ERROR 422 Request validation failed Rate Limiting Authentication endpoints are rate limited:\nLogin: 5 attempts per 15 minutes per IP Register: 3 attempts per hour per IP Password Reset: 3 attempts per hour per email Rate limit headers are included in responses:\n1 2 3 X-RateLimit-Limit: 5 X-RateLimit-Remaining: 3 X-RateLimit-Reset: 1642252200 Security Best Practices Store tokens securely: Use secure storage (not localStorage for sensitive apps) Handle token expiration: Implement automatic token refresh Use HTTPS: Always use HTTPS in production Validate on server: Never trust client-side token validation Implement logout: Clear tokens on logout Monitor failed attempts: Watch for brute force attacks SDK Examples JavaScript/TypeScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class SolobaseAuth { private baseUrl: string; private token: string | null = null; constructor(baseUrl: string) { this.baseUrl = baseUrl; this.token = localStorage.getItem('solobase_token'); } async login(email: string, password: string): Promise\u003cUser\u003e { const response = await fetch(`${this.baseUrl}/api/auth/login`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password }) }); const data = await response.json(); if (data.success) { this.token = data.data.token; localStorage.setItem('solobase_token', this.token); return data.data.user; } throw new Error(data.error.message); } async getCurrentUser(): Promise\u003cUser\u003e { const response = await this.authenticatedRequest('/api/auth/me'); return response.data.user; } private async authenticatedRequest(url: string, options: RequestInit = {}) { const response = await fetch(`${this.baseUrl}${url}`, { ...options, headers: { ...options.headers, 'Authorization': `Bearer ${this.token}` } }); return response.json(); } } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import requests from typing import Optional, Dict, Any class SolobaseAuth: def __init__(self, base_url: str): self.base_url = base_url self.token: Optional[str] = None def login(self, email: str, password: str) -\u003e Dict[str, Any]: response = requests.post(f\"{self.base_url}/api/auth/login\", json={ \"email\": email, \"password\": password }) data = response.json() if data[\"success\"]: self.token = data[\"data\"][\"token\"] return data[\"data\"][\"user\"] raise Exception(data[\"error\"][\"message\"]) def get_current_user(self) -\u003e Dict[str, Any]: response = self._authenticated_request(\"GET\", \"/api/auth/me\") return response[\"data\"][\"user\"] def _authenticated_request(self, method: str, url: str, **kwargs) -\u003e Dict[str, Any]: headers = kwargs.get(\"headers\", {}) headers[\"Authorization\"] = f\"Bearer {self.token}\" response = requests.request( method, f\"{self.base_url}{url}\", headers=headers, **kwargs ) return response.json() Next Steps Database API - Database operations and queries Storage API - File upload and management Admin API - Administrative functions User Management - Managing users in the dashboard ","description":"User authentication and authorization endpoints","id":"37763f289ebbf8dab09fa213c1a07d69","section":"docs","tags":["api","authentication","jwt","security"],"title":"Authentication API","url":"/docs/api/auth/","weight":10},{"content":"Docker Deployment Docker provides the easiest way to deploy Solobase in production. This guide covers single-container deployment, multi-container setups with Docker Compose, and production best practices.\nQuick Start with Docker Single Container Run Solobase with SQLite (good for testing):\n1 2 3 4 5 6 7 docker run -d \\ --name solobase \\ -p 8080:8080 \\ -v solobase_data:/app/data \\ -e ADMIN_EMAIL=\"admin@example.com\" \\ -e ADMIN_PASSWORD=\"changeme123\" \\ solobase/solobase:latest With External Database Run with PostgreSQL:\n1 2 3 4 5 6 7 8 9 docker run -d \\ --name solobase \\ -p 8080:8080 \\ -v solobase_storage:/app/storage \\ -e DATABASE_URL=\"postgres://user:pass@db:5432/solobase\" \\ -e ADMIN_EMAIL=\"admin@example.com\" \\ -e ADMIN_PASSWORD=\"secure_password\" \\ -e JWT_SECRET=\"your-jwt-secret-here\" \\ solobase/solobase:latest Docker Compose Deployment Basic Setup Create a docker-compose.yml file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 version: '3.8' services: solobase: image: solobase/solobase:latest ports: - \"8080:8080\" environment: - DATABASE_URL=sqlite:///app/data/solobase.db - ADMIN_EMAIL=admin@example.com - ADMIN_PASSWORD=changeme123 - JWT_SECRET=your-super-secret-jwt-key - SESSION_SECRET=your-session-secret-key volumes: - solobase_data:/app/data - solobase_storage:/app/storage restart: unless-stopped volumes: solobase_data: solobase_storage: Run with:\n1 docker-compose up -d Production Setup with PostgreSQL 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 version: '3.8' services: solobase: image: solobase/solobase:latest ports: - \"8080:8080\" environment: - DATABASE_URL=postgres://solobase:${DB_PASSWORD}@db:5432/solobase - ADMIN_EMAIL=${ADMIN_EMAIL} - ADMIN_PASSWORD=${ADMIN_PASSWORD} - JWT_SECRET=${JWT_SECRET} - SESSION_SECRET=${SESSION_SECRET} - BASE_URL=https://solobase.example.com volumes: - solobase_storage:/app/storage - ./config:/app/config:ro depends_on: - db restart: unless-stopped healthcheck: test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"] interval: 30s timeout: 10s retries: 3 db: image: postgres:15-alpine environment: - POSTGRES_DB=solobase - POSTGRES_USER=solobase - POSTGRES_PASSWORD=${DB_PASSWORD} volumes: - postgres_data:/var/lib/postgresql/data restart: unless-stopped healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U solobase\"] interval: 10s timeout: 5s retries: 5 redis: image: redis:7-alpine volumes: - redis_data:/data restart: unless-stopped healthcheck: test: [\"CMD\", \"redis-cli\", \"ping\"] interval: 10s timeout: 5s retries: 3 volumes: solobase_storage: postgres_data: redis_data: Create a .env file:\n1 2 3 4 5 6 # .env DB_PASSWORD=secure_database_password ADMIN_EMAIL=admin@example.com ADMIN_PASSWORD=secure_admin_password JWT_SECRET=your-256-bit-jwt-secret-key SESSION_SECRET=your-session-encryption-key With Reverse Proxy (Nginx) Add Nginx for SSL termination and load balancing:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 version: '3.8' services: nginx: image: nginx:alpine ports: - \"80:80\" - \"443:443\" volumes: - ./nginx.conf:/etc/nginx/nginx.conf:ro - ./ssl:/etc/nginx/ssl:ro depends_on: - solobase restart: unless-stopped solobase: image: solobase/solobase:latest expose: - \"8080\" environment: - DATABASE_URL=postgres://solobase:${DB_PASSWORD}@db:5432/solobase - ADMIN_EMAIL=${ADMIN_EMAIL} - ADMIN_PASSWORD=${ADMIN_PASSWORD} - JWT_SECRET=${JWT_SECRET} - BASE_URL=https://solobase.example.com volumes: - solobase_storage:/app/storage depends_on: - db restart: unless-stopped db: image: postgres:15-alpine environment: - POSTGRES_DB=solobase - POSTGRES_USER=solobase - POSTGRES_PASSWORD=${DB_PASSWORD} volumes: - postgres_data:/var/lib/postgresql/data restart: unless-stopped volumes: solobase_storage: postgres_data: Nginx configuration (nginx.conf):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 events { worker_connections 1024; } http { upstream solobase { server solobase:8080; } server { listen 80; server_name solobase.example.com; return 301 https://$server_name$request_uri; } server { listen 443 ssl http2; server_name solobase.example.com; ssl_certificate /etc/nginx/ssl/cert.pem; ssl_certificate_key /etc/nginx/ssl/key.pem; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; client_max_body_size 100M; location / { proxy_pass http://solobase; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } } Environment Variables Required Variables 1 2 3 4 5 6 7 8 # Authentication ADMIN_EMAIL=admin@example.com ADMIN_PASSWORD=secure_password_123 JWT_SECRET=your-256-bit-secret-key SESSION_SECRET=your-session-key # Database DATABASE_URL=postgres://user:pass@host:port/dbname Optional Variables 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # Server Configuration PORT=8080 HOST=0.0.0.0 BASE_URL=https://solobase.example.com # Storage STORAGE_PROVIDER=local STORAGE_PATH=/app/storage # Or for S3: # STORAGE_PROVIDER=s3 # AWS_BUCKET=my-solobase-bucket # AWS_REGION=us-east-1 # AWS_ACCESS_KEY_ID=your-key # AWS_SECRET_ACCESS_KEY=your-secret # Email (optional) EMAIL_PROVIDER=smtp EMAIL_FROM=noreply@example.com SMTP_HOST=smtp.gmail.com SMTP_PORT=587 SMTP_USERNAME=your-email@gmail.com SMTP_PASSWORD=your-app-password # Logging LOG_LEVEL=info LOG_FORMAT=json # Rate Limiting RATE_LIMIT_ENABLED=true RATE_LIMIT_REQUESTS_PER_MINUTE=100 # CORS CORS_ALLOWED_ORIGINS=https://example.com,https://app.example.com Custom Docker Image Dockerfile Create a custom image with your configuration:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 FROM solobase/solobase:latest # Copy custom configuration COPY config.yaml /app/config/config.yaml # Copy custom static files (optional) COPY static/ /app/static/ # Set custom environment variables ENV LOG_LEVEL=info ENV RATE_LIMIT_ENABLED=true # Expose port EXPOSE 8080 # Health check HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\ CMD curl -f http://localhost:8080/health || exit 1 # Run as non-root user USER solobase CMD [\"solobase\", \"serve\"] Build and run:\n1 2 3 4 5 6 7 8 9 # Build custom image docker build -t my-solobase:latest . # Run custom image docker run -d \\ --name my-solobase \\ -p 8080:8080 \\ -v solobase_data:/app/data \\ my-solobase:latest Production Best Practices 1. Use Secrets Management Don’t put secrets in environment variables. Use Docker secrets:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 version: '3.8' services: solobase: image: solobase/solobase:latest secrets: - db_password - jwt_secret environment: - DATABASE_URL=postgres://solobase:$(cat /run/secrets/db_password)@db:5432/solobase - JWT_SECRET_FILE=/run/secrets/jwt_secret secrets: db_password: file: ./secrets/db_password.txt jwt_secret: file: ./secrets/jwt_secret.txt 2. Resource Limits Set resource limits to prevent containers from consuming all system resources:\n1 2 3 4 5 6 7 8 9 10 11 services: solobase: image: solobase/solobase:latest deploy: resources: limits: memory: 1G cpus: '1.0' reservations: memory: 512M cpus: '0.5' 3. Health Checks Implement proper health checks:\n1 2 3 4 5 6 7 8 9 services: solobase: image: solobase/solobase:latest healthcheck: test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"] interval: 30s timeout: 10s retries: 3 start_period: 40s 4. Logging Configuration Configure structured logging:\n1 2 3 4 5 6 7 8 services: solobase: image: solobase/solobase:latest logging: driver: \"json-file\" options: max-size: \"10m\" max-file: \"3\" 5. Security Hardening Run as non-root user and use read-only filesystem:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 services: solobase: image: solobase/solobase:latest user: \"1000:1000\" read_only: true tmpfs: - /tmp volumes: - solobase_data:/app/data security_opt: - no-new-privileges:true cap_drop: - ALL cap_add: - NET_BIND_SERVICE Scaling and Load Balancing Multiple Instances Run multiple Solobase instances behind a load balancer:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 version: '3.8' services: nginx: image: nginx:alpine ports: - \"80:80\" - \"443:443\" volumes: - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro depends_on: - solobase-1 - solobase-2 - solobase-3 solobase-1: image: solobase/solobase:latest environment: - DATABASE_URL=postgres://solobase:${DB_PASSWORD}@db:5432/solobase - REDIS_URL=redis://redis:6379/0 depends_on: - db - redis solobase-2: image: solobase/solobase:latest environment: - DATABASE_URL=postgres://solobase:${DB_PASSWORD}@db:5432/solobase - REDIS_URL=redis://redis:6379/0 depends_on: - db - redis solobase-3: image: solobase/solobase:latest environment: - DATABASE_URL=postgres://solobase:${DB_PASSWORD}@db:5432/solobase - REDIS_URL=redis://redis:6379/0 depends_on: - db - redis db: image: postgres:15-alpine # ... database configuration redis: image: redis:7-alpine # ... redis configuration Load balancer configuration (nginx-lb.conf):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 events { worker_connections 1024; } http { upstream solobase_backend { least_conn; server solobase-1:8080; server solobase-2:8080; server solobase-3:8080; } server { listen 80; location / { proxy_pass http://solobase_backend; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } } Monitoring and Observability Prometheus Metrics Add Prometheus monitoring:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 version: '3.8' services: solobase: image: solobase/solobase:latest environment: - METRICS_ENABLED=true - METRICS_PORT=9090 prometheus: image: prom/prometheus:latest ports: - \"9090:9090\" volumes: - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro command: - '--config.file=/etc/prometheus/prometheus.yml' - '--storage.tsdb.path=/prometheus' grafana: image: grafana/grafana:latest ports: - \"3000:3000\" environment: - GF_SECURITY_ADMIN_PASSWORD=admin volumes: - grafana_data:/var/lib/grafana volumes: grafana_data: Prometheus configuration (prometheus.yml):\n1 2 3 4 5 6 7 global: scrape_interval: 15s scrape_configs: - job_name: 'solobase' static_configs: - targets: ['solobase:9090'] Backup and Recovery Database Backups Automated PostgreSQL backups:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 services: backup: image: postgres:15-alpine environment: - PGPASSWORD=${DB_PASSWORD} volumes: - ./backups:/backups command: | sh -c ' while true; do pg_dump -h db -U solobase solobase \u003e /backups/backup_$$(date +%Y%m%d_%H%M%S).sql find /backups -name \"backup_*.sql\" -mtime +7 -delete sleep 86400 done' depends_on: - db Storage Backups Backup file storage to S3:\n1 2 3 4 5 6 7 8 9 #!/bin/bash # backup-storage.sh docker run --rm \\ -v solobase_storage:/data \\ -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \\ -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \\ amazon/aws-cli \\ s3 sync /data s3://my-backup-bucket/solobase-storage/ Troubleshooting Container Won’t Start Check logs:\n1 2 3 4 5 6 7 8 # View container logs docker logs solobase # Follow logs in real-time docker logs -f solobase # Check container status docker ps -a Database Connection Issues Test database connectivity:\n1 2 3 4 5 # Connect to database container docker exec -it postgres_container psql -U solobase -d solobase # Test connection from solobase container docker exec -it solobase solobase check-db Performance Issues Monitor resource usage:\n1 2 3 4 5 6 # Check container resource usage docker stats # Check system resources docker system df docker system prune Next Steps Cloud Deployment - Deploy to cloud platforms Environment Variables - Complete environment reference Security - Security best practices Monitoring - Advanced monitoring setup ","description":"Deploy Solobase using Docker and Docker Compose","id":"4f9506e910f3558439f37654eb4fa79a","section":"docs","tags":["deployment","docker","containers","production"],"title":"Docker Deployment","url":"/docs/deployment/docker/","weight":10},{"content":"Installing Solobase Solobase can be installed in several ways depending on your needs and environment. Choose the method that works best for your setup.\nQuick Install (Recommended) The fastest way to get started with Solobase is using our installation script:\n1 2 3 4 5 # Download and run the installation script curl -fsSL https://get.solobase.dev | bash # Or with wget wget -qO- https://get.solobase.dev | bash This script will:\nDetect your operating system and architecture Download the appropriate binary Install it to /usr/local/bin/solobase Set up basic configuration Manual Installation Download Pre-built Binaries Download the latest release for your platform from our GitHub releases page:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Linux (x86_64) wget https://github.com/user/solobase/releases/latest/download/solobase-linux-amd64.tar.gz tar -xzf solobase-linux-amd64.tar.gz sudo mv solobase /usr/local/bin/ # macOS (Intel) wget https://github.com/user/solobase/releases/latest/download/solobase-darwin-amd64.tar.gz tar -xzf solobase-darwin-amd64.tar.gz sudo mv solobase /usr/local/bin/ # macOS (Apple Silicon) wget https://github.com/user/solobase/releases/latest/download/solobase-darwin-arm64.tar.gz tar -xzf solobase-darwin-arm64.tar.gz sudo mv solobase /usr/local/bin/ # Windows (PowerShell) Invoke-WebRequest -Uri \"https://github.com/user/solobase/releases/latest/download/solobase-windows-amd64.zip\" -OutFile \"solobase.zip\" Expand-Archive -Path \"solobase.zip\" -DestinationPath \".\" Move-Item \"solobase.exe\" \"C:\\Program Files\\solobase\\\" Using Package Managers Homebrew (macOS/Linux) 1 2 3 4 5 # Add our tap brew tap solobase/tap # Install Solobase brew install solobase Snap (Linux) 1 2 3 4 5 6 # Install from Snap Store sudo snap install solobase # Enable necessary permissions sudo snap connect solobase:network sudo snap connect solobase:home Chocolatey (Windows) 1 2 # Install using Chocolatey choco install solobase Docker Installation Run Solobase using Docker without installing it locally:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Pull the latest image docker pull solobase/solobase:latest # Run with default settings docker run -d \\ --name solobase \\ -p 8080:8080 \\ -v solobase_data:/app/data \\ solobase/solobase:latest # Run with custom configuration docker run -d \\ --name solobase \\ -p 8080:8080 \\ -v $(pwd)/config:/app/config \\ -v solobase_data:/app/data \\ -e DATABASE_URL=\"sqlite:///app/data/solobase.db\" \\ solobase/solobase:latest Docker Compose Create a docker-compose.yml file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 version: '3.8' services: solobase: image: solobase/solobase:latest ports: - \"8080:8080\" environment: - DATABASE_URL=sqlite:///app/data/solobase.db - ADMIN_EMAIL=admin@example.com - ADMIN_PASSWORD=changeme123 volumes: - solobase_data:/app/data - ./config:/app/config restart: unless-stopped volumes: solobase_data: Then run:\n1 docker-compose up -d Building from Source If you prefer to build Solobase from source:\nPrerequisites Go 1.21 or later Node.js 18 or later Git Build Steps 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Clone the repository git clone https://github.com/user/solobase.git cd solobase # Install dependencies go mod download npm install # Build the frontend npm run build # Build the binary go build -o solobase ./cmd/solobase # Install globally (optional) sudo mv solobase /usr/local/bin/ Verification After installation, verify that Solobase is working correctly:\n1 2 3 4 5 6 7 8 9 10 11 # Check version solobase version # Check help solobase --help # Initialize a new instance solobase init # Start the server solobase serve You should see output similar to:\nSolobase v1.0.0 Starting server on http://localhost:8080 Database: SQLite (/home/user/.solobase/solobase.db) Admin panel: http://localhost:8080/admin Next Steps Now that Solobase is installed:\nConfigure your instance with your preferred settings Follow the Quick Start Guide to set up your first project Explore the Dashboard to understand the interface Troubleshooting Permission Denied If you get permission errors on Linux/macOS:\n1 2 3 4 5 # Make the binary executable chmod +x solobase # Or install with sudo sudo mv solobase /usr/local/bin/ Port Already in Use If port 8080 is already in use:\n1 2 3 4 5 6 # Use a different port solobase serve --port 8081 # Or set via environment variable export PORT=8081 solobase serve Database Connection Issues For database connection problems:\n1 2 3 4 5 6 7 8 # Check database permissions ls -la ~/.solobase/ # Reset database (WARNING: This will delete all data) solobase reset --confirm # Use a different database solobase serve --database-url \"postgres://user:pass@localhost/solobase\" System Requirements Minimum Requirements CPU: 1 core, 1 GHz RAM: 512 MB Storage: 100 MB free space OS: Linux, macOS, or Windows Recommended Requirements CPU: 2+ cores, 2+ GHz RAM: 2+ GB Storage: 1+ GB free space OS: Recent version of Linux, macOS, or Windows Support If you encounter issues during installation:\nCheck our Troubleshooting Guide Search existing GitHub Issues Join our Community Discord Email support at support@solobase.dev ","description":"Download and install Solobase on your system","id":"273a1d3f87830cbffaaf95a64d1ab7e6","section":"docs","tags":["installation","setup","getting-started"],"title":"Installation","url":"/docs/installation/","weight":10},{"content":"Configuration Solobase can be configured through environment variables, configuration files, or command-line flags. This guide covers all available configuration options.\nConfiguration Methods 1. Environment Variables The most common way to configure Solobase:\n1 2 3 4 export DATABASE_URL=\"sqlite:///app/data/solobase.db\" export PORT=8080 export ADMIN_EMAIL=\"admin@example.com\" solobase serve 2. Configuration File Create a config.yaml file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # config.yaml server: port: 8080 host: \"0.0.0.0\" database: url: \"sqlite:///app/data/solobase.db\" max_connections: 10 admin: email: \"admin@example.com\" password: \"secure_password_123\" storage: provider: \"local\" path: \"/app/storage\" Then run:\n1 solobase serve --config config.yaml 3. Command-Line Flags Override any setting with command-line flags:\n1 2 3 4 solobase serve \\ --port 8080 \\ --database-url \"postgres://user:pass@localhost/solobase\" \\ --admin-email \"admin@example.com\" Core Configuration Server Settings Environment Variable Config File Flag Default Description PORT server.port --port 8080 HTTP server port HOST server.host --host 0.0.0.0 HTTP server host BASE_URL server.base_url --base-url http://localhost:8080 Public base URL TLS_CERT server.tls.cert --tls-cert - TLS certificate file TLS_KEY server.tls.key --tls-key - TLS private key file Example server configuration:\n1 2 3 4 5 6 7 8 9 10 11 server: port: 8080 host: \"0.0.0.0\" base_url: \"https://solobase.example.com\" tls: cert: \"/etc/ssl/certs/solobase.crt\" key: \"/etc/ssl/private/solobase.key\" timeouts: read: \"30s\" write: \"30s\" idle: \"120s\" Database Configuration Solobase supports multiple database backends:\nSQLite (Default) 1 2 3 4 5 6 7 8 9 10 # Environment variable export DATABASE_URL=\"sqlite:///app/data/solobase.db\" # Config file database: url: \"sqlite:///app/data/solobase.db\" pragma: journal_mode: \"WAL\" synchronous: \"NORMAL\" cache_size: \"-64000\" PostgreSQL 1 2 3 4 5 6 7 8 9 10 # Environment variable export DATABASE_URL=\"postgres://user:password@localhost:5432/solobase?sslmode=disable\" # Config file database: url: \"postgres://user:password@localhost:5432/solobase\" max_connections: 25 max_idle_connections: 5 connection_max_lifetime: \"1h\" ssl_mode: \"require\" MySQL 1 2 3 4 5 6 7 8 9 10 # Environment variable export DATABASE_URL=\"mysql://user:password@localhost:3306/solobase?parseTime=true\" # Config file database: url: \"mysql://user:password@localhost:3306/solobase\" max_connections: 25 max_idle_connections: 5 connection_max_lifetime: \"1h\" charset: \"utf8mb4\" Authentication \u0026 Security Environment Variable Config File Description ADMIN_EMAIL admin.email Default admin email ADMIN_PASSWORD admin.password Default admin password JWT_SECRET auth.jwt_secret JWT signing secret SESSION_SECRET auth.session_secret Session encryption key PASSWORD_MIN_LENGTH auth.password_min_length Minimum password length 1 2 3 4 5 6 7 8 9 10 11 12 auth: jwt_secret: \"your-super-secret-jwt-key-here\" session_secret: \"your-session-encryption-key\" password_min_length: 8 session_timeout: \"24h\" max_login_attempts: 5 lockout_duration: \"15m\" admin: email: \"admin@example.com\" password: \"secure_password_123\" require_password_change: true Storage Configuration Configure file storage backend:\nLocal Storage 1 2 3 4 5 storage: provider: \"local\" path: \"/app/storage\" max_file_size: \"100MB\" allowed_extensions: [\".jpg\", \".png\", \".pdf\", \".txt\"] AWS S3 1 2 3 4 5 6 7 storage: provider: \"s3\" bucket: \"my-solobase-bucket\" region: \"us-east-1\" access_key_id: \"AKIAIOSFODNN7EXAMPLE\" secret_access_key: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" endpoint: \"\" # Optional for S3-compatible services Google Cloud Storage 1 2 3 4 5 storage: provider: \"gcs\" bucket: \"my-solobase-bucket\" credentials_file: \"/path/to/service-account.json\" project_id: \"my-gcp-project\" Advanced Configuration Logging 1 2 3 4 5 6 7 8 9 logging: level: \"info\" # debug, info, warn, error format: \"json\" # json, text output: \"stdout\" # stdout, stderr, file path file: path: \"/var/log/solobase.log\" max_size: \"100MB\" max_backups: 5 max_age: 30 # days CORS Settings 1 2 3 4 5 6 cors: allowed_origins: [\"https://example.com\", \"https://app.example.com\"] allowed_methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"] allowed_headers: [\"Content-Type\", \"Authorization\"] allow_credentials: true max_age: 86400 Rate Limiting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 rate_limiting: enabled: true requests_per_minute: 60 burst: 10 cleanup_interval: \"1m\" # Per-endpoint limits endpoints: \"/api/auth/login\": requests_per_minute: 5 burst: 2 \"/api/upload\": requests_per_minute: 10 burst: 3 Caching 1 2 3 4 5 6 7 8 9 10 cache: provider: \"memory\" # memory, redis ttl: \"1h\" max_size: \"100MB\" # Redis configuration (if provider is redis) redis: url: \"redis://localhost:6379/0\" password: \"\" max_connections: 10 Email Configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 email: provider: \"smtp\" # smtp, sendgrid, mailgun from: \"noreply@example.com\" # SMTP settings smtp: host: \"smtp.gmail.com\" port: 587 username: \"your-email@gmail.com\" password: \"your-app-password\" tls: true # SendGrid settings sendgrid: api_key: \"SG.your-api-key\" # Mailgun settings mailgun: domain: \"mg.example.com\" api_key: \"your-api-key\" Environment-Specific Configurations Development 1 2 3 4 5 6 7 8 9 10 11 12 13 # config.dev.yaml server: port: 3000 database: url: \"sqlite:///dev.db\" logging: level: \"debug\" format: \"text\" cors: allowed_origins: [\"http://localhost:3000\", \"http://localhost:5173\"] Production 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # config.prod.yaml server: port: 8080 base_url: \"https://solobase.example.com\" tls: cert: \"/etc/ssl/certs/solobase.crt\" key: \"/etc/ssl/private/solobase.key\" database: url: \"postgres://solobase:${DB_PASSWORD}@db:5432/solobase\" max_connections: 50 logging: level: \"info\" format: \"json\" output: \"/var/log/solobase.log\" rate_limiting: enabled: true requests_per_minute: 100 Configuration Validation Solobase validates your configuration on startup. Common validation errors:\nInvalid Database URL Error: invalid database URL format Expected: postgres://user:pass@host:port/dbname Got: postgres://invalid-url Missing Required Fields Error: missing required configuration - admin.email is required - auth.jwt_secret is required (or JWT_SECRET environment variable) Invalid File Paths Error: storage path does not exist or is not writable Path: /nonexistent/storage Configuration Examples Minimal Configuration 1 2 3 admin: email: \"admin@example.com\" password: \"changeme123\" Complete Production Configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 server: port: 8080 host: \"0.0.0.0\" base_url: \"https://solobase.example.com\" database: url: \"postgres://solobase:password@localhost:5432/solobase\" max_connections: 25 admin: email: \"admin@example.com\" password: \"secure_password_123\" auth: jwt_secret: \"your-256-bit-secret\" session_secret: \"your-session-key\" session_timeout: \"24h\" storage: provider: \"s3\" bucket: \"solobase-files\" region: \"us-east-1\" logging: level: \"info\" format: \"json\" output: \"/var/log/solobase.log\" rate_limiting: enabled: true requests_per_minute: 100 email: provider: \"smtp\" from: \"noreply@example.com\" smtp: host: \"smtp.example.com\" port: 587 username: \"solobase@example.com\" password: \"email_password\" tls: true Configuration Best Practices Use Environment Variables for Secrets: Never store passwords or API keys in configuration files Validate Configuration: Always test your configuration in a staging environment first Use Strong Secrets: Generate cryptographically secure secrets for JWT and session keys Enable TLS in Production: Always use HTTPS in production environments Configure Rate Limiting: Protect your API from abuse with appropriate rate limits Set Up Proper Logging: Configure structured logging for better observability Use Database Connection Pooling: Configure appropriate connection limits for your database Next Steps Quick Start Guide - Get your first project running Dashboard Overview - Learn about the admin interface Deployment Guide - Deploy to production ","description":"Configure Solobase for your environment and requirements","id":"96f42b3851e06e8878e5685bcce84b05","section":"docs","tags":["configuration","setup","environment"],"title":"Configuration","url":"/docs/configuration/","weight":20},{"content":"Database API The Database API provides endpoints for performing CRUD operations, executing queries, and managing database schema. All endpoints require authentication.\nBase URL https://your-solobase-instance.com/api/database Authentication Include your JWT token in the Authorization header:\n1 Authorization: Bearer your-jwt-token-here Tables GET /tables List all available database tables.\nResponse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"success\": true, \"data\": { \"tables\": [ { \"name\": \"users\", \"columns\": 8, \"rows\": 1247, \"size\": \"2.1MB\", \"created_at\": \"2024-01-01T00:00:00Z\" }, { \"name\": \"products\", \"columns\": 12, \"rows\": 5892, \"size\": \"8.7MB\", \"created_at\": \"2024-01-15T10:30:00Z\" } ] } } GET /tables/{table} Get table schema and metadata.\nResponse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 { \"success\": true, \"data\": { \"table\": { \"name\": \"users\", \"columns\": [ { \"name\": \"id\", \"type\": \"INTEGER\", \"nullable\": false, \"primary_key\": true, \"auto_increment\": true }, { \"name\": \"email\", \"type\": \"VARCHAR(255)\", \"nullable\": false, \"unique\": true }, { \"name\": \"name\", \"type\": \"VARCHAR(255)\", \"nullable\": false }, { \"name\": \"created_at\", \"type\": \"TIMESTAMP\", \"nullable\": false, \"default\": \"CURRENT_TIMESTAMP\" } ], \"indexes\": [ { \"name\": \"idx_users_email\", \"columns\": [\"email\"], \"unique\": true } ], \"row_count\": 1247, \"size\": \"2.1MB\" } } } Records GET /tables/{table}/records Get records from a table with pagination and filtering.\nQuery Parameters Parameter Type Description page integer Page number (default: 1) limit integer Records per page (default: 50, max: 1000) sort string Sort column order string Sort order: asc or desc filter string Filter expression search string Search term Examples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Get first page of users curl -H \"Authorization: Bearer $TOKEN\" \\ \"https://api.solobase.dev/api/database/tables/users/records\" # Get users sorted by name curl -H \"Authorization: Bearer $TOKEN\" \\ \"https://api.solobase.dev/api/database/tables/users/records?sort=name\u0026order=asc\" # Search for users curl -H \"Authorization: Bearer $TOKEN\" \\ \"https://api.solobase.dev/api/database/tables/users/records?search=john\" # Filter users by role curl -H \"Authorization: Bearer $TOKEN\" \\ \"https://api.solobase.dev/api/database/tables/users/records?filter=role=admin\" Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"success\": true, \"data\": { \"records\": [ { \"id\": 1, \"email\": \"admin@example.com\", \"name\": \"Admin User\", \"role\": \"admin\", \"created_at\": \"2024-01-01T00:00:00Z\" }, { \"id\": 2, \"email\": \"john@example.com\", \"name\": \"John Doe\", \"role\": \"user\", \"created_at\": \"2024-01-02T10:30:00Z\" } ], \"pagination\": { \"page\": 1, \"limit\": 50, \"total\": 1247, \"pages\": 25 } } } GET /tables/{table}/records/{id} Get a specific record by ID.\nResponse 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"success\": true, \"data\": { \"record\": { \"id\": 1, \"email\": \"admin@example.com\", \"name\": \"Admin User\", \"role\": \"admin\", \"created_at\": \"2024-01-01T00:00:00Z\", \"updated_at\": \"2024-01-15T14:30:00Z\" } } } POST /tables/{table}/records Create a new record.\nRequest 1 2 3 4 5 { \"email\": \"newuser@example.com\", \"name\": \"New User\", \"role\": \"user\" } Response 1 2 3 4 5 6 7 8 9 10 11 12 { \"success\": true, \"data\": { \"record\": { \"id\": 1248, \"email\": \"newuser@example.com\", \"name\": \"New User\", \"role\": \"user\", \"created_at\": \"2024-01-15T15:45:00Z\" } } } PUT /tables/{table}/records/{id} Update an existing record.\nRequest 1 2 3 4 { \"name\": \"Updated Name\", \"role\": \"admin\" } Response 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"success\": true, \"data\": { \"record\": { \"id\": 1248, \"email\": \"newuser@example.com\", \"name\": \"Updated Name\", \"role\": \"admin\", \"created_at\": \"2024-01-15T15:45:00Z\", \"updated_at\": \"2024-01-15T16:00:00Z\" } } } DELETE /tables/{table}/records/{id} Delete a record.\nResponse 1 2 3 4 5 6 { \"success\": true, \"data\": { \"message\": \"Record deleted successfully\" } } Custom Queries POST /query Execute a custom SQL query.\nRequest 1 2 3 4 { \"query\": \"SELECT COUNT(*) as total_users FROM users WHERE role = ?\", \"params\": [\"admin\"] } Response 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"success\": true, \"data\": { \"results\": [ { \"total_users\": 15 } ], \"columns\": [\"total_users\"], \"rows_affected\": 0, \"execution_time\": \"2.3ms\" } } POST /query/explain Get query execution plan.\nRequest 1 2 3 4 { \"query\": \"SELECT * FROM users WHERE email = ?\", \"params\": [\"admin@example.com\"] } Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"success\": true, \"data\": { \"plan\": [ { \"id\": 0, \"select_type\": \"SIMPLE\", \"table\": \"users\", \"type\": \"const\", \"possible_keys\": \"idx_users_email\", \"key\": \"idx_users_email\", \"rows\": 1, \"extra\": \"Using index\" } ], \"estimated_cost\": 1.0, \"estimated_rows\": 1 } } Bulk Operations POST /tables/{table}/records/bulk Create multiple records at once.\nRequest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"records\": [ { \"email\": \"user1@example.com\", \"name\": \"User One\", \"role\": \"user\" }, { \"email\": \"user2@example.com\", \"name\": \"User Two\", \"role\": \"user\" } ] } Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"success\": true, \"data\": { \"created\": 2, \"records\": [ { \"id\": 1249, \"email\": \"user1@example.com\", \"name\": \"User One\", \"role\": \"user\", \"created_at\": \"2024-01-15T16:15:00Z\" }, { \"id\": 1250, \"email\": \"user2@example.com\", \"name\": \"User Two\", \"role\": \"user\", \"created_at\": \"2024-01-15T16:15:00Z\" } ] } } PUT /tables/{table}/records/bulk Update multiple records.\nRequest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"updates\": [ { \"id\": 1249, \"data\": { \"role\": \"editor\" } }, { \"id\": 1250, \"data\": { \"role\": \"editor\" } } ] } DELETE /tables/{table}/records/bulk Delete multiple records.\nRequest 1 2 3 { \"ids\": [1249, 1250] } Data Export/Import GET /tables/{table}/export Export table data in various formats.\nQuery Parameters Parameter Type Description format string Export format: csv, json, xlsx filter string Filter expression columns string Comma-separated column names Example 1 2 3 4 5 6 7 8 9 # Export users as CSV curl -H \"Authorization: Bearer $TOKEN\" \\ \"https://api.solobase.dev/api/database/tables/users/export?format=csv\" \\ -o users.csv # Export filtered data curl -H \"Authorization: Bearer $TOKEN\" \\ \"https://api.solobase.dev/api/database/tables/users/export?format=json\u0026filter=role=admin\" \\ -o admin_users.json POST /tables/{table}/import Import data from file.\nRequest (multipart/form-data) 1 2 3 4 5 6 curl -X POST \\ -H \"Authorization: Bearer $TOKEN\" \\ -F \"file=@users.csv\" \\ -F \"format=csv\" \\ -F \"update_existing=true\" \\ \"https://api.solobase.dev/api/database/tables/users/import\" Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"success\": true, \"data\": { \"imported\": 150, \"updated\": 25, \"errors\": 2, \"error_details\": [ { \"row\": 15, \"error\": \"Duplicate email address\" }, { \"row\": 32, \"error\": \"Invalid email format\" } ] } } Error Handling Common Error Codes Code HTTP Status Description TABLE_NOT_FOUND 404 Table doesn’t exist RECORD_NOT_FOUND 404 Record doesn’t exist INVALID_QUERY 400 SQL syntax error PERMISSION_DENIED 403 Insufficient permissions VALIDATION_ERROR 422 Data validation failed CONSTRAINT_VIOLATION 409 Database constraint violated Error Response Format 1 2 3 4 5 6 7 8 9 10 11 { \"success\": false, \"error\": { \"code\": \"VALIDATION_ERROR\", \"message\": \"Validation failed\", \"details\": { \"email\": [\"Email already exists\"], \"name\": [\"Name is required\"] } } } Rate Limiting Database API endpoints are rate limited:\nRead operations: 1000 requests per minute Write operations: 100 requests per minute Query operations: 50 requests per minute Best Practices Use pagination for large datasets Filter data at the API level rather than client-side Use bulk operations for multiple records Cache frequently accessed data Use prepared statements for custom queries Monitor query performance with explain plans Implement proper error handling Use transactions for related operations SDK Examples JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class SolobaseDB { constructor(baseUrl, token) { this.baseUrl = baseUrl; this.token = token; } async getRecords(table, options = {}) { const params = new URLSearchParams(options); const response = await fetch( `${this.baseUrl}/api/database/tables/${table}/records?${params}`, { headers: { 'Authorization': `Bearer ${this.token}` } } ); return response.json(); } async createRecord(table, data) { const response = await fetch( `${this.baseUrl}/api/database/tables/${table}/records`, { method: 'POST', headers: { 'Authorization': `Bearer ${this.token}`, 'Content-Type': 'application/json' }, body: JSON.stringify(data) } ); return response.json(); } } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import requests class SolobaseDB: def __init__(self, base_url, token): self.base_url = base_url self.token = token self.headers = {'Authorization': f'Bearer {token}'} def get_records(self, table, **params): response = requests.get( f\"{self.base_url}/api/database/tables/{table}/records\", headers=self.headers, params=params ) return response.json() def create_record(self, table, data): response = requests.post( f\"{self.base_url}/api/database/tables/{table}/records\", headers={**self.headers, 'Content-Type': 'application/json'}, json=data ) return response.json() ","description":"Database operations and query endpoints","id":"6fd6b5bd3ffe3919510f7ba838eb5959","section":"docs","tags":["api","database","sql","crud"],"title":"Database API","url":"/docs/api/database/","weight":20},{"content":"Quick Start Guide This guide will help you get Solobase up and running in just a few minutes. By the end, you’ll have a working admin dashboard with user management and database browsing capabilities.\nPrerequisites Before starting, make sure you have:\nSolobase installed (Installation Guide) A terminal or command prompt A web browser Step 1: Initialize Your Project Create a new directory for your Solobase project and initialize it:\n1 2 3 4 5 6 # Create project directory mkdir my-solobase-project cd my-solobase-project # Initialize Solobase solobase init This creates the following structure:\nmy-solobase-project/ ├── config.yaml # Configuration file ├── data/ # Database and storage directory │ └── solobase.db # SQLite database (created on first run) └── storage/ # File storage directory Step 2: Configure Your Instance Edit the generated config.yaml file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # config.yaml server: port: 8080 host: \"localhost\" database: url: \"sqlite:///data/solobase.db\" admin: email: \"admin@example.com\" password: \"changeme123\" # Change this! auth: jwt_secret: \"your-secret-key-here\" # Generate a secure key session_secret: \"your-session-key\" storage: provider: \"local\" path: \"./storage\" Important: Change the default admin password and generate secure secrets:\n1 2 3 # Generate secure secrets solobase generate-secret --jwt solobase generate-secret --session Step 3: Start the Server Start your Solobase instance:\n1 solobase serve You should see output like:\n🚀 Solobase v1.0.0 starting... 📊 Database: SQLite (data/solobase.db) 🔧 Admin panel: http://localhost:8080/admin 🌐 Server running on http://localhost:8080 ✅ Ready to accept connections Step 4: Access the Admin Dashboard Open your web browser and navigate to http://localhost:8080/admin.\nLog in with your admin credentials:\nEmail: admin@example.com Password: changeme123 (or whatever you set) Step 5: Explore the Dashboard Once logged in, you’ll see the main dashboard with several sections:\nOverview System statistics Recent activity Quick actions User Management View and manage users Create new users Set permissions and roles Database Browser Browse database tables View and edit records Execute custom queries File Storage Upload and manage files Organize files in folders Set access permissions Step 6: Create Your First User Let’s create a new user through the admin interface:\nNavigate to Users in the sidebar Click Add New User Fill in the form: Name: John Doe Email: john@example.com Password: secure123 Role: User Click Create User Step 7: Set Up a Database Table Create a simple table to store some data:\nGo to Database → Tables Click Create Table Configure your table: 1 2 3 4 5 6 7 CREATE TABLE products ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, description TEXT, price DECIMAL(10,2), created_at DATETIME DEFAULT CURRENT_TIMESTAMP ); Click Execute Step 8: Add Some Data Add sample data to your new table:\nNavigate to Database → Tables → products Click Add Record Fill in the form: Name: Laptop Computer Description: High-performance laptop for developers Price: 1299.99 Click Save Repeat this process to add a few more products.\nStep 9: Upload Files Test the file storage functionality:\nGo to Storage → Files Click Upload Files Select some files from your computer Organize them into folders if desired Step 10: Explore the API Solobase provides a REST API for all functionality. Test it using curl:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Get an authentication token curl -X POST http://localhost:8080/api/auth/login \\ -H \"Content-Type: application/json\" \\ -d '{\"email\":\"admin@example.com\",\"password\":\"changeme123\"}' # Use the token to access the API export TOKEN=\"your-jwt-token-here\" # List users curl -H \"Authorization: Bearer $TOKEN\" \\ http://localhost:8080/api/users # Get products curl -H \"Authorization: Bearer $TOKEN\" \\ http://localhost:8080/api/database/products # Upload a file curl -X POST \\ -H \"Authorization: Bearer $TOKEN\" \\ -F \"file=@/path/to/your/file.jpg\" \\ http://localhost:8080/api/storage/upload Common Next Steps Now that you have Solobase running, here are some common next steps:\n1. Customize the Dashboard Create custom dashboard widgets:\n1 2 3 4 5 6 7 8 9 # Add to config.yaml dashboard: widgets: - type: \"chart\" title: \"Sales Over Time\" query: \"SELECT DATE(created_at) as date, SUM(price) as total FROM products GROUP BY DATE(created_at)\" - type: \"stat\" title: \"Total Products\" query: \"SELECT COUNT(*) FROM products\" 2. Set Up User Roles Define custom roles and permissions:\n1 2 3 4 5 6 7 8 9 # Add to config.yaml auth: roles: editor: permissions: [\"read\", \"write\"] tables: [\"products\", \"categories\"] viewer: permissions: [\"read\"] tables: [\"products\"] 3. Configure Email Notifications Set up email notifications for user actions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Add to config.yaml email: provider: \"smtp\" from: \"noreply@example.com\" smtp: host: \"smtp.gmail.com\" port: 587 username: \"your-email@gmail.com\" password: \"your-app-password\" tls: true notifications: new_user: true password_reset: true data_changes: true 4. Add Custom Validation Create validation rules for your data:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Add to config.yaml validation: tables: products: name: required: true min_length: 3 max_length: 100 price: required: true min: 0 max: 999999.99 email: format: \"email\" 5. Set Up Backups Configure automatic database backups:\n1 2 3 4 5 6 7 8 # Add to config.yaml backup: enabled: true schedule: \"0 2 * * *\" # Daily at 2 AM retention: 30 # Keep 30 days storage: provider: \"s3\" bucket: \"my-backups\" Troubleshooting Server Won’t Start If the server fails to start:\n1 2 3 4 5 6 7 8 # Check the configuration solobase validate-config # Check database connectivity solobase check-db # View detailed logs solobase serve --log-level debug Can’t Access Admin Panel If you can’t access the admin panel:\nCheck that the server is running on the correct port Verify your admin credentials Check firewall settings Try accessing via 127.0.0.1 instead of localhost Database Connection Issues For database problems:\n1 2 3 4 5 6 7 8 # Reset the database (WARNING: This deletes all data) solobase reset-db --confirm # Check database permissions ls -la data/ # Try a different database URL solobase serve --database-url \"sqlite:///test.db\" Production Deployment When you’re ready to deploy to production:\nUse a Production Database: Switch from SQLite to PostgreSQL or MySQL Enable HTTPS: Configure TLS certificates Set Strong Secrets: Generate cryptographically secure keys Configure Backups: Set up automated database backups Enable Monitoring: Add logging and metrics collection Use Environment Variables: Store secrets in environment variables See our Deployment Guide for detailed instructions.\nWhat’s Next? Dashboard Overview - Learn about all dashboard features User Management - Advanced user and permission management Database Browser - Advanced database operations API Reference - Complete API documentation Deployment - Deploy to production environments Getting Help If you need help:\nCheck our Documentation Try the Live Demo Search GitHub Issues Join our Community Discord Email support@solobase.dev Congratulations! You now have a fully functional Solobase instance. Explore the documentation to learn about advanced features and customization options.\n","description":"Get up and running with Solobase in minutes","id":"6546478d87b4368b79e83eb0e32c466c","section":"docs","tags":["quick-start","tutorial","getting-started"],"title":"Quick Start Guide","url":"/docs/quick-start/","weight":30},{"content":"Dashboard Overview The Solobase dashboard provides a comprehensive admin interface for managing your application. This guide covers all the main features and how to use them effectively.\nMain Navigation The dashboard is organized into several main sections:\nOverview The main dashboard page shows:\nSystem statistics and health metrics Recent user activity Database usage statistics Storage usage information Quick action buttons User Management Comprehensive user administration:\nView all users in a searchable table Create new user accounts Edit user profiles and permissions Manage user roles and access levels Reset passwords and manage authentication Database Browser Direct database access and management:\nBrowse all database tables View and edit individual records Execute custom SQL queries Import and export data Manage database schema File Storage File and media management:\nUpload files and images Organize files in folders Set file permissions and access controls Preview images and documents Manage storage quotas Dashboard Widgets System Health Monitor your Solobase instance:\nCPU Usage: 45% Memory Usage: 2.1GB / 4GB Disk Usage: 15GB / 100GB Active Connections: 23 Recent Activity Track user actions and system events:\nUser logins and logouts Data modifications File uploads System errors and warnings Quick Stats Key metrics at a glance:\nTotal users: 1,247 Database records: 45,892 Storage used: 15.2GB API requests today: 8,934 Customization Dashboard Layout Customize the dashboard to your needs:\nRearrange widgets by dragging Hide or show specific sections Set default views and filters Configure refresh intervals User Preferences Each admin user can customize:\nTheme (light/dark mode) Language settings Notification preferences Default page sizes and views Keyboard Shortcuts Speed up your workflow with keyboard shortcuts:\nShortcut Action Ctrl + / Open search Ctrl + N Create new user Ctrl + D Go to database Ctrl + F Go to files Ctrl + S Save current form Esc Close modal/cancel Mobile Interface The dashboard is fully responsive and works on mobile devices:\nTouch-friendly navigation Optimized layouts for small screens Swipe gestures for navigation Mobile-specific features Security Features The dashboard includes several security measures:\nSession timeout after inactivity Two-factor authentication support Audit logging of all actions IP-based access restrictions Role-based permissions Performance Tips Keep your dashboard running smoothly:\nUse filters to limit large data sets Enable pagination for large tables Clear browser cache regularly Monitor system resources Regular database maintenance Troubleshooting Common dashboard issues and solutions:\nSlow Loading If the dashboard loads slowly:\nCheck your internet connection Clear browser cache and cookies Disable browser extensions Check server resources Login Issues If you can’t log in:\nVerify your credentials Check if your account is active Try resetting your password Contact your administrator Missing Features If features are missing:\nCheck your user role and permissions Verify the feature is enabled Try refreshing the page Check for system updates ","description":"Understanding the Solobase admin dashboard interface","id":"6ad45a4c07647ef1437167d1474c3cfe","section":"docs","tags":["dashboard","interface","admin","ui"],"title":"Dashboard Overview","url":"/docs/dashboard/","weight":40},{"content":"Solobase Documentation Welcome to the Solobase documentation. Here you’ll find everything you need to get started with Solobase, from installation to advanced configuration and API usage.\nQuick Navigation Getting Started Installation - Download and install Solobase Configuration - Basic configuration options Quick Start Guide - Get up and running in minutes User Guide Dashboard Overview - Understanding the interface User Management - Managing users and permissions Database Browser - Working with databases File Storage - Managing files and uploads API Reference Authentication API - User authentication endpoints Database API - Database operations Storage API - File storage operations Admin API - Administrative functions Deployment Docker Deployment - Running with Docker Cloud Deployment - Deploy to cloud platforms Environment Variables - Configuration options Security Considerations - Security best practices Development Building from Source - Compile Solobase yourself Contributing - How to contribute to the project Architecture - Understanding the codebase Need Help? If you can’t find what you’re looking for in the documentation, please:\nCheck out our [GitHub repository]({{ .Site.Params.github_url }}) for issues and discussions Try the live demo to see Solobase in action Review the examples for common use cases ","description":"Complete documentation for installing, configuring, and using Solobase","id":"4cdd37113783e47641dd300543c94e1b","section":"docs","tags":[],"title":"Documentation","url":"/docs/","weight":100}]