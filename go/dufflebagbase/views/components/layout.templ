package components

import "fmt"

// Page container with consistent padding and max-width
type ContainerOptions struct {
	MaxWidth string // "sm", "md", "lg", "xl", "full"
	Padding  string // "none", "sm", "md", "lg"
	Class    string
}

templ Container(opts ContainerOptions) {
	<div class={ 
		"container",
		templ.KV("container-" + opts.MaxWidth, opts.MaxWidth != ""),
		templ.KV("padding-" + opts.Padding, opts.Padding != ""),
		opts.Class,
	}>
		{ children... }
	</div>
}

// Page header with title and optional actions
type PageHeaderOptions struct {
	Title    string
	Subtitle string
	Actions  []HeaderAction
	Class    string
}

type HeaderAction struct {
	Component templ.Component
}

templ PageHeader(opts PageHeaderOptions) {
	<div class={ "page-header", opts.Class }>
		<div class="page-header-content">
			<h1 class="page-title">{ opts.Title }</h1>
			if opts.Subtitle != "" {
				<p class="page-subtitle">{ opts.Subtitle }</p>
			}
		</div>
		if len(opts.Actions) > 0 {
			<div class="page-header-actions">
				for _, action := range opts.Actions {
					@action.Component
				}
			</div>
		}
	</div>
}

// Grid layout component
type GridOptions struct {
	Columns   int    // Number of columns (1-12)
	Gap       string // "sm", "md", "lg", "xl"
	Responsive bool   // Auto-responsive grid
	Class     string
}

templ Grid(opts GridOptions) {
	<div class={ 
		"grid",
		templ.KV(fmt.Sprintf("grid-cols-%d", opts.Columns), opts.Columns > 0),
		templ.KV("grid-responsive", opts.Responsive),
		templ.KV("gap-" + opts.Gap, opts.Gap != ""),
		opts.Class,
	}>
		{ children... }
	</div>
}

// Flex layout component
type FlexOptions struct {
	Direction string // "row", "column"
	Justify   string // "start", "end", "center", "between", "around"
	Align     string // "start", "end", "center", "stretch"
	Wrap      bool
	Gap       string // "sm", "md", "lg", "xl"
	Class     string
}

templ Flex(opts FlexOptions) {
	<div class={ 
		"flex",
		templ.KV("flex-" + opts.Direction, opts.Direction != ""),
		templ.KV("justify-" + opts.Justify, opts.Justify != ""),
		templ.KV("align-" + opts.Align, opts.Align != ""),
		templ.KV("flex-wrap", opts.Wrap),
		templ.KV("gap-" + opts.Gap, opts.Gap != ""),
		opts.Class,
	}>
		{ children... }
	</div>
}

// Section component with optional title
type SectionOptions struct {
	Title    string
	Subtitle string
	Class    string
	ID       string
}

templ Section(opts SectionOptions) {
	<section 
		class={ "section", opts.Class }
		if opts.ID != "" {
			id={ opts.ID }
		}
	>
		if opts.Title != "" {
			<div class="section-header">
				<h2 class="section-title">{ opts.Title }</h2>
				if opts.Subtitle != "" {
					<p class="section-subtitle">{ opts.Subtitle }</p>
				}
			</div>
		}
		<div class="section-content">
			{ children... }
		</div>
	</section>
}

// Toolbar component for action bars
type ToolbarOptions struct {
	Title   string
	Actions []templ.Component
	Class   string
}

templ Toolbar(opts ToolbarOptions) {
	<div class={ "toolbar", opts.Class }>
		if opts.Title != "" {
			<h2 class="toolbar-title">{ opts.Title }</h2>
		}
		<div class="toolbar-actions">
			for _, action := range opts.Actions {
				@action
			}
		</div>
	</div>
}

// Empty state component
type EmptyStateOptions struct {
	Icon        string
	Title       string
	Description string
	Actions     []templ.Component
	Class       string
}

templ EmptyState(opts EmptyStateOptions) {
	<div class={ "empty-state", opts.Class }>
		if opts.Icon != "" {
			<div class="empty-state-icon">
				<i data-lucide={ opts.Icon }></i>
			</div>
		}
		<h3 class="empty-state-title">{ opts.Title }</h3>
		if opts.Description != "" {
			<p class="empty-state-description">{ opts.Description }</p>
		}
		if len(opts.Actions) > 0 {
			<div class="empty-state-actions">
				for _, action := range opts.Actions {
					@action
				}
			</div>
		}
	</div>
}

// Loading state component
type LoadingOptions struct {
	Text  string
	Size  string // "sm", "md", "lg"
	Class string
}

templ Loading(opts LoadingOptions) {
	<div class={ "loading-state", templ.KV("loading-" + opts.Size, opts.Size != ""), opts.Class }>
		<div class="spinner"></div>
		if opts.Text != "" {
			<p class="loading-text">{ opts.Text }</p>
		}
	</div>
}

// Divider component
type DividerOptions struct {
	Text     string
	Position string // "left", "center", "right"
	Class    string
}

templ Divider(opts DividerOptions) {
	<div class={ "divider", templ.KV("divider-" + opts.Position, opts.Position != ""), opts.Class }>
		if opts.Text != "" {
			<span class="divider-text">{ opts.Text }</span>
		}
	</div>
}