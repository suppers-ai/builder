// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

type SidebarProps struct {
	UserEmail  string
	Extensions []ExtensionItem // Extensions for accordion
}

func Sidebar(props SidebarProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"sidebar\" id=\"sidebar\"><div class=\"sidebar-logo-section\"><a href=\"/dashboard\" class=\"sidebar-logo-link\"><img src=\"/static/img/logo_long.png\" alt=\"DuffleBagBase\" class=\"sidebar-logo sidebar-logo-expanded\"> <img src=\"/static/img/logo.png\" alt=\"DuffleBagBase\" class=\"sidebar-logo sidebar-logo-collapsed\" style=\"display: none;\"></a></div><div class=\"sidebar-menu-card\"><nav class=\"sidebar-nav\"><a href=\"/dashboard\" class=\"sidebar-nav-link\" data-page=\"dashboard\" title=\"Home\" hx-get=\"/dashboard\" hx-target=\"#main-content\" hx-swap=\"outerHTML\" hx-push-url=\"true\"><i data-lucide=\"home\" class=\"sidebar-nav-icon\"></i> <span class=\"sidebar-nav-text\">Home</span></a> <a href=\"/users\" class=\"sidebar-nav-link\" data-page=\"users\" title=\"Users\" hx-get=\"/users\" hx-target=\"#main-content\" hx-swap=\"outerHTML\" hx-push-url=\"true\"><i data-lucide=\"users\" class=\"sidebar-nav-icon\"></i> <span class=\"sidebar-nav-text\">Users</span></a> <a href=\"/database\" class=\"sidebar-nav-link\" data-page=\"database\" title=\"Database\" hx-get=\"/database\" hx-target=\"#main-content\" hx-swap=\"outerHTML\" hx-push-url=\"true\"><i data-lucide=\"database\" class=\"sidebar-nav-icon\"></i> <span class=\"sidebar-nav-text\">Database</span></a> <a href=\"/storage\" class=\"sidebar-nav-link\" data-page=\"storage\" title=\"Storage\" hx-get=\"/storage\" hx-target=\"#main-content\" hx-swap=\"outerHTML\" hx-push-url=\"true\"><i data-lucide=\"hard-drive\" class=\"sidebar-nav-icon\"></i> <span class=\"sidebar-nav-text\">Storage</span></a> <a href=\"/logs\" class=\"sidebar-nav-link\" data-page=\"logs\" title=\"Logs\" hx-get=\"/logs\" hx-target=\"#main-content\" hx-swap=\"outerHTML\" hx-push-url=\"true\"><i data-lucide=\"file-text\" class=\"sidebar-nav-icon\"></i> <span class=\"sidebar-nav-text\">Logs</span></a>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = SidebarAccordion(SidebarAccordionProps{
			Title:      "Extensions",
			Icon:       "puzzle",
			Extensions: props.Extensions,
			ActivePath: "", // Will be set by JavaScript
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<a href=\"/settings\" class=\"sidebar-nav-link\" data-page=\"settings\" title=\"Settings\" hx-get=\"/settings\" hx-target=\"#main-content\" hx-swap=\"outerHTML\" hx-push-url=\"true\"><i data-lucide=\"settings\" class=\"sidebar-nav-icon\"></i> <span class=\"sidebar-nav-text\">Settings</span></a></nav><button class=\"sidebar-collapse-btn\" onclick=\"toggleSidebar()\" title=\"Collapse Sidebar\"><i data-lucide=\"chevron-left\" class=\"collapse-icon\"></i></button></div><div class=\"sidebar-user-section\" onclick=\"toggleProfileMenu(event)\"><div class=\"user-avatar\"><i data-lucide=\"user\" class=\"user-avatar-icon\"></i></div><span class=\"user-email\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(props.UserEmail)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar.templ`, Line: 108, Col: 54}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</span> <i data-lucide=\"chevron-up\" class=\"user-menu-arrow\"></i></div><!-- Profile Popup Menu --><div id=\"profile-popup\" class=\"profile-popup\"><div class=\"profile-popup-item\" onclick=\"window.location.href='/settings'\"><i data-lucide=\"settings\" class=\"popup-icon\"></i> <span>Settings</span></div><div class=\"profile-popup-divider\"></div><form action=\"/auth/logout\" method=\"POST\" class=\"profile-popup-item\" onclick=\"this.submit()\"><i data-lucide=\"log-out\" class=\"popup-icon\"></i> <span>Sign Out</span></form></div></div><script>\n        // Initialize Lucide icons\n        document.addEventListener('DOMContentLoaded', () => {\n            if (window.lucide) {\n                lucide.createIcons();\n            }\n            \n            // Set active nav item based on current path\n            const path = window.location.pathname;\n            const navLinks = document.querySelectorAll('.sidebar-nav-link');\n            navLinks.forEach(link => {\n                if (link.getAttribute('href') === path) {\n                    link.classList.add('active');\n                }\n            });\n            \n            // Update active state on HTMX navigation\n            document.body.addEventListener('htmx:afterSwap', function(event) {\n                const currentPath = window.location.pathname;\n                navLinks.forEach(link => {\n                    if (link.getAttribute('href') === currentPath) {\n                        link.classList.add('active');\n                    } else {\n                        link.classList.remove('active');\n                    }\n                });\n                // Re-initialize Lucide icons after swap\n                if (window.lucide) {\n                    lucide.createIcons();\n                }\n            });\n            \n            // Check for saved sidebar state\n            const isCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';\n            if (isCollapsed) {\n                document.getElementById('sidebar').classList.add('collapsed');\n                document.querySelector('.main-content').classList.add('sidebar-collapsed');\n                updateCollapseIcon(true);\n            }\n        });\n        \n        // Toggle sidebar collapse/expand\n        function toggleSidebar() {\n            const sidebar = document.getElementById('sidebar');\n            const mainContent = document.querySelector('.main-content');\n            const isCollapsed = sidebar.classList.toggle('collapsed');\n            \n            if (mainContent) {\n                mainContent.classList.toggle('sidebar-collapsed');\n            }\n            \n            // Save state to localStorage\n            localStorage.setItem('sidebarCollapsed', isCollapsed);\n            \n            // Update collapse icon\n            updateCollapseIcon(isCollapsed);\n            \n            // Re-initialize Lucide icons\n            if (window.lucide) {\n                setTimeout(() => lucide.createIcons(), 100);\n            }\n        }\n        \n        function updateCollapseIcon(isCollapsed) {\n            const icon = document.querySelector('.collapse-icon');\n            if (icon) {\n                icon.setAttribute('data-lucide', isCollapsed ? 'chevron-right' : 'chevron-left');\n                if (window.lucide) {\n                    lucide.createIcons();\n                }\n            }\n        }\n        \n        // Toggle profile popup menu\n        function toggleProfileMenu(event) {\n            event.stopPropagation();\n            const popup = document.getElementById('profile-popup');\n            const arrow = document.querySelector('.user-menu-arrow');\n            \n            if (popup.classList.contains('show')) {\n                popup.classList.remove('show');\n                if (arrow) arrow.style.transform = 'rotate(0deg)';\n            } else {\n                popup.classList.add('show');\n                if (arrow) arrow.style.transform = 'rotate(180deg)';\n                \n                // Re-initialize Lucide icons in popup\n                if (window.lucide) {\n                    lucide.createIcons();\n                }\n            }\n        }\n        \n        // Close popup when clicking outside\n        document.addEventListener('click', (event) => {\n            const popup = document.getElementById('profile-popup');\n            const userSection = document.querySelector('.sidebar-user-section');\n            \n            if (popup && !popup.contains(event.target) && !userSection.contains(event.target)) {\n                popup.classList.remove('show');\n                const arrow = document.querySelector('.user-menu-arrow');\n                if (arrow) {\n                    arrow.style.transform = 'rotate(0deg)';\n                }\n            }\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
