package components

type CardOptions struct {
	Class       string
	ID          string
	Padding     string // "sm", "md", "lg", or custom
	Shadow      bool
	Hoverable   bool
	Clickable   bool
	Background  string // Use CSS variable names
}

// Basic card container
templ Card(opts CardOptions) {
	<div 
		class={ "card", opts.Class, templ.KV("card-hoverable", opts.Hoverable), templ.KV("card-clickable", opts.Clickable), templ.KV("card-shadow", opts.Shadow) }
		if opts.ID != "" {
			id={ opts.ID }
		}
		if opts.Padding != "" {
			data-padding={ opts.Padding }
		}
	>
		{ children... }
	</div>
}

// Card with header
templ CardWithHeader(title string, opts CardOptions) {
	<div 
		class={ "card", opts.Class, templ.KV("card-hoverable", opts.Hoverable), templ.KV("card-clickable", opts.Clickable), templ.KV("card-shadow", opts.Shadow) }
		if opts.ID != "" {
			id={ opts.ID }
		}
	>
		<div class="card-header">
			<h3 class="card-title">{ title }</h3>
		</div>
		<div class="card-body">
			{ children... }
		</div>
	</div>
}

// Stat card component
type StatCardData struct {
	Icon      string // Lucide icon name
	IconColor string // CSS variable name
	Value     string
	Label     string
	Change    string // Optional change indicator
	Trend     string // "up", "down", "neutral"
}

templ StatCard(data StatCardData) {
	<div class="stat-card">
		<div class="stat-icon">
			<i 
				data-lucide={ data.Icon }
				if data.IconColor != "" {
					style={ "color: var(" + data.IconColor + ");" }
				}
			></i>
		</div>
		<div class="stat-content">
			<div class="stat-value">{ data.Value }</div>
			<div class="stat-label">{ data.Label }</div>
			if data.Change != "" {
				<div class={ "stat-change", "trend-" + data.Trend }>
					{ data.Change }
				</div>
			}
		</div>
	</div>
}

// Feature card for collections/items display
type FeatureCardData struct {
	Title       string
	Subtitle    string
	Description string
	Stats       []StatItem
	Actions     []ActionButton
	Badge       string
	BadgeType   string // "success", "warning", "danger", "info"
}

type StatItem struct {
	Label string
	Value string
}

type ActionButton struct {
	Label   string
	Icon    string
	OnClick string
	Type    string // "primary", "secondary", "danger"
}

templ FeatureCard(data FeatureCardData) {
	<div class="feature-card">
		<div class="feature-card-header">
			<h3 class="feature-card-title">{ data.Title }</h3>
			if data.Badge != "" {
				<span class={ "badge", "badge-" + data.BadgeType }>{ data.Badge }</span>
			}
		</div>
		if data.Subtitle != "" {
			<div class="feature-card-subtitle">{ data.Subtitle }</div>
		}
		if data.Description != "" {
			<p class="feature-card-description">{ data.Description }</p>
		}
		if len(data.Stats) > 0 {
			<div class="feature-card-stats">
				for _, stat := range data.Stats {
					<div class="stat-item">
						<span class="stat-item-label">{ stat.Label }:</span>
						<span class="stat-item-value">{ stat.Value }</span>
					</div>
				}
			</div>
		}
		if len(data.Actions) > 0 {
			<div class="feature-card-actions">
				for _, action := range data.Actions {
					<button 
						class={ "btn", "btn-" + action.Type, "btn-sm" }
						data-onclick={ action.OnClick }
					>
						if action.Icon != "" {
							<i data-lucide={ action.Icon }></i>
						}
						{ action.Label }
					</button>
				}
			</div>
		}
	</div>
}