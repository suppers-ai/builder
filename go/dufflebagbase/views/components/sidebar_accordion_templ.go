// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
)

type ExtensionItem struct {
	ID      string
	Name    string
	Icon    string
	Enabled bool
	Path    string
}

type SidebarAccordionProps struct {
	Title      string
	Icon       string
	Extensions []ExtensionItem
	ActivePath string
}

func SidebarAccordion(props SidebarAccordionProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"sidebar-accordion\"><button class=\"sidebar-accordion-toggle\" onclick=\"toggleExtensionAccordion(this)\" data-accordion=\"extensions\" title=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(props.Title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 28, Col: 31}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"><i data-lucide=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(props.Icon)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 29, Col: 39}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" class=\"sidebar-nav-icon\"></i> <span class=\"sidebar-nav-text\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(props.Title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 30, Col: 56}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</span> <i data-lucide=\"chevron-down\" class=\"sidebar-accordion-arrow\"></i></button><div class=\"sidebar-accordion-content\" id=\"extensions-accordion\" style=\"display: none;\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(props.Extensions) > 0 {
			for _, ext := range props.Extensions {
				var templ_7745c5c3_Var5 = []any{"sidebar-accordion-item", templ.KV("active", props.ActivePath == ext.Path)}
				templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var5...)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<a href=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 templ.SafeURL
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinURLErrs(templ.SafeURL(fmt.Sprintf("/ext/%s/dashboard", ext.ID)))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 37, Col: 85}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\" class=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var5).String())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 1, Col: 0}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\" data-extension-id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(ext.ID)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 39, Col: 49}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\" title=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 string
				templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 40, Col: 39}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\" hx-get=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 string
				templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("/ext/%s/dashboard", ext.ID))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 41, Col: 72}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\" hx-target=\"#main-content\" hx-swap=\"innerHTML\" hx-push-url=\"true\"><div class=\"accordion-item-content\"><i data-lucide=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var11 string
				templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Icon)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 46, Col: 53}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" class=\"accordion-item-icon\"></i> <span class=\"accordion-item-text\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var12 string
				templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/sidebar_accordion.templ`, Line: 47, Col: 72}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</span> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if ext.Enabled {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<span class=\"extension-status-dot active\" title=\"Active\"></span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				} else {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<span class=\"extension-status-dot inactive\" title=\"Inactive\"></span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</div></a> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<div class=\"sidebar-accordion-empty\"><span class=\"empty-text\">No extensions installed</span></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<a href=\"/extensions\" class=\"sidebar-accordion-manage\" title=\"Manage Extensions\" hx-get=\"/extensions\" hx-target=\"#main-content\" hx-swap=\"innerHTML\" hx-push-url=\"true\"><i data-lucide=\"settings-2\" class=\"accordion-item-icon\"></i> <span class=\"accordion-item-text\">Manage Extensions</span></a></div></div><style>\n        .sidebar-accordion {\n            width: 100%;\n        }\n        \n        .sidebar-accordion-toggle {\n            width: 100%;\n            display: flex;\n            align-items: center;\n            padding: 12px 16px;  /* Match .sidebar-nav-link padding */\n            background: transparent;\n            border: none;\n            color: var(--text-secondary);  /* Use standard text-secondary color */\n            cursor: pointer;\n            transition: all 0.2s;\n            text-align: left;\n            border-radius: 8px;\n            text-decoration: none;\n        }\n        \n        .sidebar-accordion-toggle:hover {\n            background: var(--bg-hover);\n            color: var(--text-primary);\n        }\n        \n        .sidebar-accordion-toggle .sidebar-nav-icon {\n            width: 20px;\n            height: 20px;\n            margin-right: 12px;\n            flex-shrink: 0;\n        }\n        \n        .sidebar-accordion-toggle .sidebar-nav-text {\n            flex: 1;\n            font-size: 14px;\n        }\n        \n        .sidebar-accordion-arrow {\n            margin-left: auto;\n            width: 16px;\n            height: 16px;\n            transition: transform 0.2s;\n            flex-shrink: 0;\n        }\n        \n        .sidebar-accordion-toggle.expanded .sidebar-accordion-arrow {\n            transform: rotate(180deg);\n        }\n        \n        .sidebar-accordion-content {\n            padding-top: 4px;\n            overflow: hidden;\n            transition: all 0.3s ease;\n        }\n        \n        .sidebar-accordion-item {\n            display: flex;\n            align-items: center;\n            padding: 10px 16px 10px 44px;  /* Indent from left edge */\n            color: var(--text-secondary);  /* Use standard text-secondary */\n            text-decoration: none;\n            transition: all 0.2s;\n            border-radius: 8px;\n            margin: 2px 8px;\n        }\n        \n        .sidebar-accordion-item:hover {\n            background: var(--bg-hover);\n            color: var(--text-primary);\n        }\n        \n        .sidebar-accordion-item.active {\n            background: var(--primary-color);\n            color: white;\n            font-weight: 500;\n        }\n        \n        .sidebar-accordion-item.active .accordion-item-icon {\n            color: white;\n        }\n        \n        .accordion-item-content {\n            display: flex;\n            align-items: center;\n            width: 100%;\n            gap: 8px;\n        }\n        \n        .accordion-item-icon {\n            width: 16px;\n            height: 16px;\n            flex-shrink: 0;\n        }\n        \n        .accordion-item-text {\n            flex: 1;\n            font-size: 14px;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n        \n        .extension-status-dot {\n            width: 6px;\n            height: 6px;\n            border-radius: 50%;\n            flex-shrink: 0;\n        }\n        \n        .extension-status-dot.active {\n            background: #10b981;\n            box-shadow: 0 0 4px rgba(16, 185, 129, 0.5);\n        }\n        \n        .extension-status-dot.inactive {\n            background: var(--text-muted);\n        }\n        \n        .sidebar-accordion-empty {\n            padding: 12px 44px;\n            color: var(--text-muted);\n            font-size: 13px;\n            font-style: italic;\n        }\n        \n        .sidebar-accordion-manage {\n            display: flex;\n            align-items: center;\n            padding: 10px 16px 10px 44px;\n            color: var(--text-secondary);\n            text-decoration: none;\n            transition: all 0.2s;\n            border-radius: 8px;\n            margin: 8px 8px 4px 8px;\n            border-top: 1px solid var(--border-color);\n            padding-top: 12px;\n        }\n        \n        .sidebar-accordion-manage:hover {\n            background: var(--bg-hover);\n            color: var(--text-primary);\n        }\n        \n        .sidebar-accordion-manage .accordion-item-icon {\n            width: 16px;\n            height: 16px;\n            margin-right: 8px;\n        }\n        \n        .sidebar-accordion-manage .accordion-item-text {\n            font-size: 14px;\n        }\n        \n        /* Collapsed sidebar styles */\n        .sidebar.collapsed .sidebar-accordion-toggle {\n            padding: 12px 16px;  /* Keep same padding as nav items */\n        }\n        \n        .sidebar.collapsed .sidebar-accordion-arrow,\n        .sidebar.collapsed .sidebar-nav-text,\n        .sidebar.collapsed .accordion-item-text,\n        .sidebar.collapsed .extension-status-dot {\n            display: none;\n        }\n        \n        .sidebar.collapsed .sidebar-accordion-content {\n            display: none !important;\n        }\n    </style><script>\n        function toggleExtensionAccordion(button) {\n            const content = document.getElementById('extensions-accordion');\n            const isExpanded = button.classList.contains('expanded');\n            \n            if (isExpanded) {\n                button.classList.remove('expanded');\n                content.style.display = 'none';\n                localStorage.setItem('extensionAccordionExpanded', 'false');\n            } else {\n                button.classList.add('expanded');\n                content.style.display = 'block';\n                localStorage.setItem('extensionAccordionExpanded', 'true');\n                \n                // Re-initialize Lucide icons\n                if (window.lucide) {\n                    setTimeout(() => lucide.createIcons(), 50);\n                }\n            }\n        }\n        \n        // Restore accordion state on page load\n        document.addEventListener('DOMContentLoaded', () => {\n            const isExpanded = localStorage.getItem('extensionAccordionExpanded') === 'true';\n            if (isExpanded) {\n                const button = document.querySelector('[data-accordion=\"extensions\"]');\n                const content = document.getElementById('extensions-accordion');\n                if (button && content) {\n                    button.classList.add('expanded');\n                    content.style.display = 'block';\n                }\n            }\n            \n            // Update active state based on current path\n            const path = window.location.pathname;\n            document.querySelectorAll('.sidebar-accordion-item').forEach(item => {\n                const itemPath = item.getAttribute('href');\n                if (itemPath === path) {\n                    item.classList.add('active');\n                    // Auto-expand accordion if an extension is active\n                    const button = document.querySelector('[data-accordion=\"extensions\"]');\n                    const content = document.getElementById('extensions-accordion');\n                    if (button && content) {\n                        button.classList.add('expanded');\n                        content.style.display = 'block';\n                    }\n                }\n            });\n        });\n        \n        // Update active state on HTMX navigation\n        document.body.addEventListener('htmx:afterSwap', function(event) {\n            const currentPath = window.location.pathname;\n            document.querySelectorAll('.sidebar-accordion-item').forEach(item => {\n                const itemPath = item.getAttribute('href');\n                if (itemPath === currentPath) {\n                    item.classList.add('active');\n                } else {\n                    item.classList.remove('active');\n                }\n            });\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
