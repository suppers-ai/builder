package components

type SidebarProps struct {
    UserEmail  string
    Extensions []ExtensionItem // Extensions for accordion
}

templ Sidebar(props SidebarProps) {
    <div class="sidebar" id="sidebar">
        <div class="sidebar-logo-section">
            <a href="/dashboard" class="sidebar-logo-link">
                <img src="/static/img/logo_long.png" alt="DuffleBagBase" class="sidebar-logo sidebar-logo-expanded"/>
                <img src="/static/img/logo.png" alt="DuffleBagBase" class="sidebar-logo sidebar-logo-collapsed" style="display: none;"/>
            </a>
        </div>
        
        <div class="sidebar-menu-card">
            <nav class="sidebar-nav">
                <a href="/dashboard" 
                   class="sidebar-nav-link" 
                   data-page="dashboard" 
                   title="Home"
                   hx-get="/dashboard"
                   hx-target="#main-content"
                   hx-swap="outerHTML"
                   hx-push-url="true">
                    <i data-lucide="home" class="sidebar-nav-icon"></i>
                    <span class="sidebar-nav-text">Home</span>
                </a>
                
                <a href="/users" 
                   class="sidebar-nav-link" 
                   data-page="users" 
                   title="Users"
                   hx-get="/users"
                   hx-target="#main-content"
                   hx-swap="outerHTML"
                   hx-push-url="true">
                    <i data-lucide="users" class="sidebar-nav-icon"></i>
                    <span class="sidebar-nav-text">Users</span>
                </a>
                
                <a href="/database" 
                   class="sidebar-nav-link" 
                   data-page="database" 
                   title="Database"
                   hx-get="/database"
                   hx-target="#main-content"
                   hx-swap="outerHTML"
                   hx-push-url="true">
                    <i data-lucide="database" class="sidebar-nav-icon"></i>
                    <span class="sidebar-nav-text">Database</span>
                </a>
                
                <a href="/storage" 
                   class="sidebar-nav-link" 
                   data-page="storage" 
                   title="Storage"
                   hx-get="/storage"
                   hx-target="#main-content"
                   hx-swap="outerHTML"
                   hx-push-url="true">
                    <i data-lucide="hard-drive" class="sidebar-nav-icon"></i>
                    <span class="sidebar-nav-text">Storage</span>
                </a>
                
                <a href="/logs" 
                   class="sidebar-nav-link" 
                   data-page="logs" 
                   title="Logs"
                   hx-get="/logs"
                   hx-target="#main-content"
                   hx-swap="outerHTML"
                   hx-push-url="true">
                    <i data-lucide="file-text" class="sidebar-nav-icon"></i>
                    <span class="sidebar-nav-text">Logs</span>
                </a>
                
                @SidebarAccordion(SidebarAccordionProps{
                    Title:      "Extensions",
                    Icon:       "puzzle",
                    Extensions: props.Extensions,
                    ActivePath: "", // Will be set by JavaScript
                })
                
                <a href="/settings" 
                   class="sidebar-nav-link" 
                   data-page="settings" 
                   title="Settings"
                   hx-get="/settings"
                   hx-target="#main-content"
                   hx-swap="outerHTML"
                   hx-push-url="true">
                    <i data-lucide="settings" class="sidebar-nav-icon"></i>
                    <span class="sidebar-nav-text">Settings</span>
                </a>
            </nav>
            
            <button class="sidebar-collapse-btn" onclick="toggleSidebar()" title="Collapse Sidebar">
                <i data-lucide="chevron-left" class="collapse-icon"></i>
            </button>
        </div>
        
        <div class="sidebar-user-section" onclick="toggleProfileMenu(event)">
            <div class="user-avatar">
                <i data-lucide="user" class="user-avatar-icon"></i>
            </div>
            <span class="user-email">{ props.UserEmail }</span>
            <i data-lucide="chevron-up" class="user-menu-arrow"></i>
        </div>
        
        <!-- Profile Popup Menu -->
        <div id="profile-popup" class="profile-popup">
            <div class="profile-popup-item" onclick="window.location.href='/settings'">
                <i data-lucide="settings" class="popup-icon"></i>
                <span>Settings</span>
            </div>
            <div class="profile-popup-divider"></div>
            <form action="/auth/logout" method="POST" class="profile-popup-item" onclick="this.submit()">
                <i data-lucide="log-out" class="popup-icon"></i>
                <span>Sign Out</span>
            </form>
        </div>
    </div>
    
    <script>
        // Initialize Lucide icons
        document.addEventListener('DOMContentLoaded', () => {
            if (window.lucide) {
                lucide.createIcons();
            }
            
            // Set active nav item based on current path
            const path = window.location.pathname;
            const navLinks = document.querySelectorAll('.sidebar-nav-link');
            navLinks.forEach(link => {
                if (link.getAttribute('href') === path) {
                    link.classList.add('active');
                }
            });
            
            // Update active state on HTMX navigation
            document.body.addEventListener('htmx:afterSwap', function(event) {
                const currentPath = window.location.pathname;
                navLinks.forEach(link => {
                    if (link.getAttribute('href') === currentPath) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });
                // Re-initialize Lucide icons after swap
                if (window.lucide) {
                    lucide.createIcons();
                }
            });
            
            // Check for saved sidebar state
            const isCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
            if (isCollapsed) {
                document.getElementById('sidebar').classList.add('collapsed');
                document.querySelector('.main-content').classList.add('sidebar-collapsed');
                updateCollapseIcon(true);
            }
        });
        
        // Toggle sidebar collapse/expand
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.querySelector('.main-content');
            const isCollapsed = sidebar.classList.toggle('collapsed');
            
            if (mainContent) {
                mainContent.classList.toggle('sidebar-collapsed');
            }
            
            // Save state to localStorage
            localStorage.setItem('sidebarCollapsed', isCollapsed);
            
            // Update collapse icon
            updateCollapseIcon(isCollapsed);
            
            // Re-initialize Lucide icons
            if (window.lucide) {
                setTimeout(() => lucide.createIcons(), 100);
            }
        }
        
        function updateCollapseIcon(isCollapsed) {
            const icon = document.querySelector('.collapse-icon');
            if (icon) {
                icon.setAttribute('data-lucide', isCollapsed ? 'chevron-right' : 'chevron-left');
                if (window.lucide) {
                    lucide.createIcons();
                }
            }
        }
        
        // Toggle profile popup menu
        function toggleProfileMenu(event) {
            event.stopPropagation();
            const popup = document.getElementById('profile-popup');
            const arrow = document.querySelector('.user-menu-arrow');
            
            if (popup.classList.contains('show')) {
                popup.classList.remove('show');
                if (arrow) arrow.style.transform = 'rotate(0deg)';
            } else {
                popup.classList.add('show');
                if (arrow) arrow.style.transform = 'rotate(180deg)';
                
                // Re-initialize Lucide icons in popup
                if (window.lucide) {
                    lucide.createIcons();
                }
            }
        }
        
        // Close popup when clicking outside
        document.addEventListener('click', (event) => {
            const popup = document.getElementById('profile-popup');
            const userSection = document.querySelector('.sidebar-user-section');
            
            if (popup && !popup.contains(event.target) && !userSection.contains(event.target)) {
                popup.classList.remove('show');
                const arrow = document.querySelector('.user-menu-arrow');
                if (arrow) {
                    arrow.style.transform = 'rotate(0deg)';
                }
            }
        });
    </script>
}