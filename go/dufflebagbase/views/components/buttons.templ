package components

type ButtonOptions struct {
	Type     string // "button", "submit", "reset"
	Variant  string // "primary", "secondary", "success", "danger", "warning", "info", "ghost", "link"
	Size     string // "sm", "md", "lg"
	Icon     string // Lucide icon name
	IconPos  string // "left", "right"
	Loading  bool
	Disabled bool
	FullWidth bool
	Class    string
	ID       string
	OnClick  string // JavaScript code as string
	Form     string // Form ID for submit buttons
}

// Button component
templ Button(text string, opts ButtonOptions) {
	<button
		type={ getButtonType(opts.Type) }
		class={ getButtonClasses(opts) }
		if opts.ID != "" {
			id={ opts.ID }
		}
		if opts.Disabled || opts.Loading {
			disabled
		}
		if opts.OnClick != "" {
			data-onclick={ opts.OnClick }
		}
		if opts.Form != "" {
			form={ opts.Form }
		}
	>
		if opts.Loading {
			<span class="spinner"></span>
		}
		if opts.Icon != "" && opts.IconPos != "right" {
			<i data-lucide={ opts.Icon }></i>
		}
		<span>{ text }</span>
		if opts.Icon != "" && opts.IconPos == "right" {
			<i data-lucide={ opts.Icon }></i>
		}
	</button>
}

// Icon-only button
templ IconButton(icon string, opts ButtonOptions) {
	<button
		type={ getButtonType(opts.Type) }
		class={ getIconButtonClasses(opts) }
		if opts.ID != "" {
			id={ opts.ID }
		}
		if opts.Disabled || opts.Loading {
			disabled
		}
		if opts.OnClick != "" {
			data-onclick={ opts.OnClick }
		}
	>
		if opts.Loading {
			<span class="spinner"></span>
		} else {
			<i data-lucide={ icon }></i>
		}
	</button>
}

// Button group component
type ButtonGroupOptions struct {
	Align    string // "left", "right", "center"
	Spacing  string // "tight", "normal", "loose"
	Vertical bool
	Class    string
}

templ ButtonGroup(opts ButtonGroupOptions) {
	<div class={ getButtonGroupClasses(opts) }>
		{ children... }
	</div>
}

// Link button (styled as button but is an anchor)
type LinkButtonOptions struct {
	Href     string
	Target   string
	Variant  string // "primary", "secondary", etc.
	Size     string // "sm", "md", "lg"
	Icon     string
	IconPos  string // "left", "right"
	Disabled bool
	FullWidth bool
	Class    string
	ID       string
}

templ LinkButton(text string, opts LinkButtonOptions) {
	<a
		href={ getLinkHref(opts) }
		if opts.Target != "" {
			target={ opts.Target }
		}
		class={ getLinkButtonClasses(opts) }
		if opts.ID != "" {
			id={ opts.ID }
		}
		if opts.Disabled {
			aria-disabled="true"
			tabindex="-1"
		}
	>
		if opts.Icon != "" && opts.IconPos != "right" {
			<i data-lucide={ opts.Icon }></i>
		}
		<span>{ text }</span>
		if opts.Icon != "" && opts.IconPos == "right" {
			<i data-lucide={ opts.Icon }></i>
		}
	</a>
}

// Dropdown button component
type DropdownButtonOptions struct {
	Text     string
	Variant  string
	Size     string
	Icon     string
	Items    []DropdownItem
	Class    string
	ID       string
	Disabled bool
}

type DropdownItem struct {
	Label    string
	Icon     string
	OnClick  string
	Href     string
	Divider  bool
	Disabled bool
}

templ DropdownButton(opts DropdownButtonOptions) {
	<div class={ "dropdown", opts.Class }>
		<button
			type="button"
			class={ getDropdownButtonClasses(opts) }
			if opts.ID != "" {
				id={ opts.ID }
			}
			if opts.Disabled {
				disabled
			}
			onclick="toggleDropdown(this)"
		>
			if opts.Icon != "" {
				<i data-lucide={ opts.Icon }></i>
			}
			<span>{ opts.Text }</span>
			<i data-lucide="chevron-down" class="dropdown-icon"></i>
		</button>
		<div class="dropdown-menu">
			for _, item := range opts.Items {
				if item.Divider {
					<div class="dropdown-divider"></div>
				} else if item.Href != "" {
					<a 
						href={ item.Href }
						class={ getDropdownItemClasses(item) }
					>
						if item.Icon != "" {
							<i data-lucide={ item.Icon }></i>
						}
						{ item.Label }
					</a>
				} else {
					<button
						type="button"
						class={ getDropdownItemClasses(item) }
						if item.OnClick != "" {
							data-onclick={ item.OnClick }
						}
						if item.Disabled {
							disabled
						}
					>
						if item.Icon != "" {
							<i data-lucide={ item.Icon }></i>
						}
						{ item.Label }
					</button>
				}
			}
		</div>
	</div>
}

// Helper functions
func getButtonType(t string) string {
	if t == "" {
		return "button"
	}
	return t
}


func getButtonClasses(opts ButtonOptions) string {
	classes := "btn"
	
	if opts.Variant != "" {
		classes += " btn-" + opts.Variant
	} else {
		classes += " btn-primary"
	}
	
	if opts.Size != "" {
		classes += " btn-" + opts.Size
	} else {
		classes += " btn-md"
	}
	
	if opts.FullWidth {
		classes += " btn-full"
	}
	
	if opts.Loading {
		classes += " btn-loading"
	}
	
	if opts.Class != "" {
		classes += " " + opts.Class
	}
	
	return classes
}

func getIconButtonClasses(opts ButtonOptions) string {
	classes := "btn-icon"
	
	if opts.Variant != "" {
		classes += " btn-" + opts.Variant
	} else {
		classes += " btn-ghost"
	}
	
	if opts.Size != "" {
		classes += " btn-" + opts.Size
	} else {
		classes += " btn-md"
	}
	
	if opts.Loading {
		classes += " btn-loading"
	}
	
	if opts.Class != "" {
		classes += " " + opts.Class
	}
	
	return classes
}

func getButtonGroupClasses(opts ButtonGroupOptions) string {
	classes := "btn-group"
	
	if opts.Vertical {
		classes += " btn-group-vertical"
	}
	
	if opts.Align != "" {
		classes += " align-" + opts.Align
	}
	
	if opts.Spacing != "" {
		classes += " spacing-" + opts.Spacing
	} else {
		classes += " spacing-normal"
	}
	
	if opts.Class != "" {
		classes += " " + opts.Class
	}
	
	return classes
}

func getLinkHref(opts LinkButtonOptions) string {
	if opts.Disabled {
		return "#"
	}
	if opts.Href == "" {
		return "#"
	}
	return opts.Href
}

func getLinkButtonClasses(opts LinkButtonOptions) string {
	classes := "btn"
	
	if opts.Variant != "" {
		classes += " btn-" + opts.Variant
	} else {
		classes += " btn-primary"
	}
	
	if opts.Size != "" {
		classes += " btn-" + opts.Size
	} else {
		classes += " btn-md"
	}
	
	if opts.FullWidth {
		classes += " btn-full"
	}
	
	if opts.Disabled {
		classes += " btn-disabled"
	}
	
	if opts.Class != "" {
		classes += " " + opts.Class
	}
	
	return classes
}

func getDropdownButtonClasses(opts DropdownButtonOptions) string {
	classes := "btn dropdown-toggle"
	
	if opts.Variant != "" {
		classes += " btn-" + opts.Variant
	} else {
		classes += " btn-secondary"
	}
	
	if opts.Size != "" {
		classes += " btn-" + opts.Size
	} else {
		classes += " btn-md"
	}
	
	return classes
}

func getDropdownItemClasses(item DropdownItem) string {
	classes := "dropdown-item"
	
	if item.Disabled {
		classes += " disabled"
	}
	
	return classes
}