// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/suppers-ai/dufflebagbase/views/components"
	"github.com/suppers-ai/dufflebagbase/views/layouts"
	"time"
)

type User struct {
	ID        string
	Email     string
	Username  string
	Role      string
	Confirmed bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

type UsersPageData struct {
	UserEmail   string
	Users       []User
	TotalUsers  int
	CurrentPage int
	PageSize    int
}

func UsersPage(data UsersPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container\"><div class=\"page-header\"><h1>Users</h1><div class=\"header-actions\"><button class=\"btn btn-primary\" onclick=\"showCreateUserModal()\">Add User</button></div></div><div class=\"stats-grid\"><div class=\"stat-card\"><h3>Total Users</h3><div class=\"stat-value\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.TotalUsers))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/users.templ`, Line: 46, Col: 66}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div></div><div class=\"stat-card\"><h3>Confirmed Users</h3><div class=\"stat-value\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", countConfirmedUsers(data.Users)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/users.templ`, Line: 51, Col: 59}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div></div><div class=\"stat-card\"><h3>Admin Users</h3><div class=\"stat-value\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", countAdminUsers(data.Users)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/users.templ`, Line: 57, Col: 55}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.Table(components.TableData{
				Columns: []components.TableColumn{
					{Key: "email", Label: "Email", Width: "25%"},
					{Key: "username", Label: "Username", Width: "15%"},
					{Key: "role", Label: "Role", Width: "10%"},
					{Key: "confirmed", Label: "Confirmed", Width: "10%"},
					{Key: "created", Label: "Created", Width: "20%"},
					{Key: "actions", Label: "Actions", Width: "20%"},
				},
				Rows:  usersToTableRows(data.Users),
				Empty: "No users found",
			}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if data.TotalUsers > data.PageSize {
				templ_7745c5c3_Err = components.Pagination(components.PaginationData{
					CurrentPage: data.CurrentPage,
					TotalPages:  (data.TotalUsers + data.PageSize - 1) / data.PageSize,
					PageSize:    data.PageSize,
					TotalItems:  data.TotalUsers,
				}, "/users").Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div><!-- Create User Modal --> <div id=\"createUserModal\" class=\"modal\"><div class=\"modal-content\"><div class=\"modal-header\"><h2>Create User</h2><span class=\"close\" onclick=\"hideCreateUserModal()\">&times;</span></div><form id=\"createUserForm\" onsubmit=\"createUser(event)\"><div class=\"form-group\"><label for=\"email\">Email</label> <input type=\"email\" id=\"email\" name=\"email\" required></div><div class=\"form-group\"><label for=\"password\">Password</label> <input type=\"password\" id=\"password\" name=\"password\" required></div><div class=\"form-group\"><label for=\"username\">Username</label> <input type=\"text\" id=\"username\" name=\"username\"></div><div class=\"form-group\"><label for=\"role\">Role</label> <select id=\"role\" name=\"role\"><option value=\"user\">User</option> <option value=\"admin\">Admin</option></select></div><div class=\"form-actions\"><button type=\"button\" class=\"btn btn-secondary\" onclick=\"hideCreateUserModal()\">Cancel</button> <button type=\"submit\" class=\"btn btn-primary\">Create User</button></div></form></div></div><script src=\"/static/js/users.js\" type=\"module\"></script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layouts.Base(layouts.BaseProps{
			Title:     "Users",
			UserEmail: data.UserEmail,
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func usersToTableRows(users []User) []components.TableRow {
	rows := make([]components.TableRow, len(users))
	for i, user := range users {
		rows[i] = components.TableRow{
			"email":     user.Email,
			"username":  valueOrDash(user.Username),
			"role":      valueOrDash(user.Role),
			"confirmed": boolToYesNo(user.Confirmed),
			"created":   user.CreatedAt.Format("2006-01-02 15:04"),
			"actions": templ.Raw(fmt.Sprintf(`
				<button class="btn btn-sm" onclick="editUser('%s')">Edit</button>
				<button class="btn btn-sm btn-danger" onclick="deleteUser('%s')">Delete</button>
			`, user.ID, user.ID)),
		}
	}
	return rows
}

func countConfirmedUsers(users []User) int {
	count := 0
	for _, user := range users {
		if user.Confirmed {
			count++
		}
	}
	return count
}

func countAdminUsers(users []User) int {
	count := 0
	for _, user := range users {
		if user.Role == "admin" {
			count++
		}
	}
	return count
}

func valueOrDash(s string) string {
	if s == "" {
		return "-"
	}
	return s
}

func boolToYesNo(b bool) string {
	if b {
		return "Yes"
	}
	return "No"
}

var _ = templruntime.GeneratedTemplate
