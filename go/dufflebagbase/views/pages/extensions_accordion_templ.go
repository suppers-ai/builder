// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/suppers-ai/dufflebagbase/views/layouts"
	"time"
)

type ExtensionInfoAccordion struct {
	Name        string
	Version     string
	Description string
	Author      string
	Status      string
	Enabled     bool
	Health      string
	LastChecked time.Time
	Routes      []string
	ConfigSize  int
	Permissions []string
}

type ExtensionsAccordionPageData struct {
	UserEmail       string
	Extensions      []ExtensionInfoAccordion
	TotalExtensions int
}

func ExtensionsAccordionContent(data ExtensionsAccordionPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container\"><div class=\"page-header\"><h1>Extensions</h1><p class=\"page-subtitle\">Manage system extensions and plugins</p></div><!-- Stats Cards --><div class=\"stats-overview\"><div class=\"stat-card\"><div class=\"stat-icon\"><i data-lucide=\"puzzle\" style=\"color: #3b82f6;\"></i></div><div class=\"stat-content\"><div class=\"stat-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.TotalExtensions))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 43, Col: 70}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div><div class=\"stat-label\">Total Extensions</div></div></div><div class=\"stat-card\"><div class=\"stat-icon\"><i data-lucide=\"check-circle\" style=\"color: #10b981;\"></i></div><div class=\"stat-content\"><div class=\"stat-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", countEnabledExtensionsAccordion(data.Extensions)))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 52, Col: 98}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div><div class=\"stat-label\">Enabled</div></div></div><div class=\"stat-card\"><div class=\"stat-icon\"><i data-lucide=\"shield-check\" style=\"color: #8b5cf6;\"></i></div><div class=\"stat-content\"><div class=\"stat-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", countHealthyExtensionsAccordion(data.Extensions)))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 61, Col: 98}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div><div class=\"stat-label\">Healthy</div></div></div><div class=\"stat-card\"><div class=\"stat-icon\"><i data-lucide=\"globe\" style=\"color: #f59e0b;\"></i></div><div class=\"stat-content\"><div class=\"stat-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", countExtensionsWithRoutesAccordion(data.Extensions)))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 70, Col: 101}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div><div class=\"stat-label\">With Routes</div></div></div></div><!-- Extensions Accordion --><div class=\"extensions-container\"><div class=\"extensions-header\"><h2>Installed Extensions</h2><button class=\"btn-secondary\" onclick=\"refreshExtensions()\"><i data-lucide=\"refresh-cw\"></i> Refresh</button></div><div class=\"extensions-accordion\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, ext := range data.Extensions {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<div class=\"extension-item\" data-extension-id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 88, Col: 61}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\"><div class=\"extension-header-accordion\" onclick=\"toggleExtension(this)\"><div class=\"extension-header-left\"><i data-lucide=\"chevron-right\" class=\"accordion-icon\"></i><div class=\"extension-title-group\"><h3 class=\"extension-name\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 93, Col: 46}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</h3><span class=\"extension-version\">v")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var8 string
			templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Version)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 94, Col: 55}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</span> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if ext.Enabled {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<span class=\"badge badge-success\">Enabled</span> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<span class=\"badge badge-secondary\">Disabled</span> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if ext.Health == "healthy" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<span class=\"badge badge-success\"><i data-lucide=\"check-circle\"></i> Healthy</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else if ext.Health == "warning" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<span class=\"badge badge-warning\"><i data-lucide=\"alert-triangle\"></i> Warning</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else if ext.Health == "error" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<span class=\"badge badge-danger\"><i data-lucide=\"x-circle\"></i> Error</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</div></div><div class=\"extension-header-actions\" onclick=\"event.stopPropagation()\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if ext.Enabled {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<button class=\"btn-icon\" data-extension-id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 string
				templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 120, Col: 62}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\" onclick=\"disableExtension(this.dataset.extensionId)\" title=\"Disable\"><i data-lucide=\"power-off\"></i></button> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "<button class=\"btn-icon\" data-extension-id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 string
				templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 124, Col: 62}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\" onclick=\"enableExtension(this.dataset.extensionId)\" title=\"Enable\"><i data-lucide=\"power\"></i></button> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "<button class=\"btn-icon\" data-extension-id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 128, Col: 61}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\" onclick=\"configureExtension(this.dataset.extensionId)\" title=\"Configure\"><i data-lucide=\"settings\"></i></button></div></div><div class=\"extension-content\"><div class=\"extension-description\"><p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Description)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 135, Col: 28}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "</p></div><div class=\"extension-details\"><div class=\"detail-row\"><label>Author:</label> <span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var13 string
			templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(ext.Author)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 141, Col: 27}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</span></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if ext.Enabled {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "<div class=\"detail-row highlight-row\"><label>Access URL:</label><div class=\"url-container\"><a href=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var14 templ.SafeURL
				templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinURLErrs(templ.SafeURL(fmt.Sprintf("/ext/%s", ext.Name)))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 148, Col: 68}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "\" target=\"_blank\" class=\"extension-url\"><i data-lucide=\"external-link\"></i> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var15 string
				templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%s/ext/%s", getBaseURL(), ext.Name))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 150, Col: 62}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "</a> <button class=\"copy-btn\" data-url=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var16 string
				templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%s/ext/%s", getBaseURL(), ext.Name))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 152, Col: 95}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "\" onclick=\"copyToClipboard(this.dataset.url)\" title=\"Copy URL\"><i data-lucide=\"copy\"></i></button></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if len(ext.Routes) > 0 {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "<div class=\"detail-row\"><label>API Endpoints:</label><div class=\"endpoints-list\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				for _, route := range ext.Routes {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "<div class=\"endpoint-item\"><code>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var17 string
					templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("/ext/%s%s", ext.Name, route))
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 165, Col: 62}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "</code> <span class=\"method-badge\">GET</span></div>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "</div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if len(ext.Permissions) > 0 {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "<div class=\"detail-row\"><label>Required Permissions:</label><div class=\"permissions-list\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				for _, perm := range ext.Permissions {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "<span class=\"permission-item\">")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var18 string
					templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(perm)
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 178, Col: 48}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "</span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, "</div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "<div class=\"detail-row\"><label>Last Health Check:</label> <span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var19 string
			templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(ext.LastChecked.Format("2006-01-02 15:04:05"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/extensions_accordion.templ`, Line: 186, Col: 62}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 37, "</span></div></div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 38, "</div></div></div><!-- Accordion Styles --><style>\n\t\t.stats-overview {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n\t\t\tgap: 1rem;\n\t\t\tmargin-bottom: 2rem;\n\t\t}\n\t\t.stat-card {\n\t\t\tbackground: white;\n\t\t\tborder-radius: 0.5rem;\n\t\t\tpadding: 1rem;\n\t\t\tbox-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 1rem;\n\t\t}\n\t\t.stat-icon {\n\t\t\twidth: 48px;\n\t\t\theight: 48px;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\tbackground: #f3f4f6;\n\t\t\tborder-radius: 0.5rem;\n\t\t}\n\t\t.stat-icon svg {\n\t\t\twidth: 24px;\n\t\t\theight: 24px;\n\t\t}\n\t\t.stat-content {\n\t\t\tflex: 1;\n\t\t}\n\t\t.stat-value {\n\t\t\tfont-size: 1.5rem;\n\t\t\tfont-weight: 700;\n\t\t\tcolor: #111827;\n\t\t}\n\t\t.stat-label {\n\t\t\tfont-size: 0.875rem;\n\t\t\tcolor: #6b7280;\n\t\t\tmargin-top: 0.25rem;\n\t\t}\n\t\t\n\t\t.extensions-container {\n\t\t\tbackground: white;\n\t\t\tborder-radius: 0.5rem;\n\t\t\tbox-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n\t\t\toverflow: hidden;\n\t\t}\n\t\t\n\t\t.extensions-header {\n\t\t\tpadding: 1.5rem;\n\t\t\tborder-bottom: 1px solid #e5e7eb;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t}\n\t\t\n\t\t.extensions-header h2 {\n\t\t\tmargin: 0;\n\t\t\tfont-size: 1.25rem;\n\t\t\tfont-weight: 600;\n\t\t}\n\t\t\n\t\t.extensions-accordion {\n\t\t\tpadding: 0;\n\t\t}\n\t\t\n\t\t.extension-item {\n\t\t\tborder-bottom: 1px solid #e5e7eb;\n\t\t}\n\t\t\n\t\t.extension-item:last-child {\n\t\t\tborder-bottom: none;\n\t\t}\n\t\t\n\t\t.extension-header-accordion {\n\t\t\tpadding: 1rem 1.5rem;\n\t\t\tcursor: pointer;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\ttransition: background-color 0.2s;\n\t\t}\n\t\t\n\t\t.extension-header-accordion:hover {\n\t\t\tbackground-color: #f9fafb;\n\t\t}\n\t\t\n\t\t.extension-header-left {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 1rem;\n\t\t}\n\t\t\n\t\t.accordion-icon {\n\t\t\twidth: 20px;\n\t\t\theight: 20px;\n\t\t\ttransition: transform 0.2s;\n\t\t}\n\t\t\n\t\t.extension-item.expanded .accordion-icon {\n\t\t\ttransform: rotate(90deg);\n\t\t}\n\t\t\n\t\t.extension-title-group {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 0.75rem;\n\t\t}\n\t\t\n\t\t.extension-name {\n\t\t\tmargin: 0;\n\t\t\tfont-size: 1rem;\n\t\t\tfont-weight: 600;\n\t\t}\n\t\t\n\t\t.extension-version {\n\t\t\tbackground: #f3f4f6;\n\t\t\tcolor: #374151;\n\t\t\tpadding: 0.125rem 0.375rem;\n\t\t\tborder-radius: 0.25rem;\n\t\t\tfont-size: 0.75rem;\n\t\t\tfont-family: monospace;\n\t\t}\n\t\t\n\t\t.extension-header-actions {\n\t\t\tdisplay: flex;\n\t\t\tgap: 0.5rem;\n\t\t}\n\t\t\n\t\t.extension-content {\n\t\t\tdisplay: none;\n\t\t\tpadding: 0 1.5rem 1.5rem 3.5rem;\n\t\t\tanimation: slideDown 0.3s ease-out;\n\t\t}\n\t\t\n\t\t.extension-item.expanded .extension-content {\n\t\t\tdisplay: block;\n\t\t}\n\t\t\n\t\t@keyframes slideDown {\n\t\t\tfrom {\n\t\t\t\topacity: 0;\n\t\t\t\ttransform: translateY(-10px);\n\t\t\t}\n\t\t\tto {\n\t\t\t\topacity: 1;\n\t\t\t\ttransform: translateY(0);\n\t\t\t}\n\t\t}\n\t\t\n\t\t.extension-description {\n\t\t\tmargin-bottom: 1.5rem;\n\t\t\tpadding: 1rem;\n\t\t\tbackground: #f9fafb;\n\t\t\tborder-radius: 0.375rem;\n\t\t\tborder-left: 3px solid #3b82f6;\n\t\t}\n\t\t\n\t\t.extension-description p {\n\t\t\tmargin: 0;\n\t\t\tcolor: #4b5563;\n\t\t\tline-height: 1.6;\n\t\t}\n\t\t\n\t\t.extension-details {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tgap: 1rem;\n\t\t}\n\t\t\n\t\t.detail-row {\n\t\t\tdisplay: flex;\n\t\t\talign-items: flex-start;\n\t\t\tgap: 1rem;\n\t\t\tpadding: 0.75rem 0;\n\t\t\tborder-bottom: 1px solid #f3f4f6;\n\t\t}\n\t\t\n\t\t.detail-row:last-child {\n\t\t\tborder-bottom: none;\n\t\t}\n\t\t\n\t\t.detail-row label {\n\t\t\tmin-width: 150px;\n\t\t\tfont-weight: 600;\n\t\t\tcolor: #374151;\n\t\t}\n\t\t\n\t\t.highlight-row {\n\t\t\tbackground: #eff6ff;\n\t\t\tpadding: 1rem;\n\t\t\tborder-radius: 0.375rem;\n\t\t\tborder: 1px solid #dbeafe;\n\t\t\tmargin: 0.5rem 0;\n\t\t}\n\t\t\n\t\t.url-container {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 0.5rem;\n\t\t\tflex: 1;\n\t\t}\n\t\t\n\t\t.extension-url {\n\t\t\tdisplay: inline-flex;\n\t\t\talign-items: center;\n\t\t\tgap: 0.25rem;\n\t\t\tcolor: #2563eb;\n\t\t\ttext-decoration: none;\n\t\t\tfont-family: monospace;\n\t\t\tfont-size: 0.875rem;\n\t\t\tpadding: 0.375rem 0.75rem;\n\t\t\tbackground: white;\n\t\t\tborder: 1px solid #dbeafe;\n\t\t\tborder-radius: 0.375rem;\n\t\t\tflex: 1;\n\t\t\ttransition: all 0.2s;\n\t\t}\n\t\t\n\t\t.extension-url:hover {\n\t\t\tbackground: #f0f9ff;\n\t\t\tborder-color: #93c5fd;\n\t\t}\n\t\t\n\t\t.copy-btn {\n\t\t\tpadding: 0.375rem;\n\t\t\tbackground: white;\n\t\t\tborder: 1px solid #e5e7eb;\n\t\t\tborder-radius: 0.375rem;\n\t\t\tcursor: pointer;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\ttransition: all 0.2s;\n\t\t}\n\t\t\n\t\t.copy-btn:hover {\n\t\t\tbackground: #f3f4f6;\n\t\t}\n\t\t\n\t\t.endpoints-list {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tgap: 0.5rem;\n\t\t\tflex: 1;\n\t\t}\n\t\t\n\t\t.endpoint-item {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 0.5rem;\n\t\t}\n\t\t\n\t\t.endpoint-item code {\n\t\t\tbackground: #f9fafb;\n\t\t\tpadding: 0.375rem 0.75rem;\n\t\t\tborder-radius: 0.375rem;\n\t\t\tfont-size: 0.8125rem;\n\t\t\tfont-family: 'SF Mono', Monaco, monospace;\n\t\t\tborder: 1px solid #e5e7eb;\n\t\t\tflex: 1;\n\t\t}\n\t\t\n\t\t.method-badge {\n\t\t\tbackground: #dbeafe;\n\t\t\tcolor: #1e40af;\n\t\t\tpadding: 0.125rem 0.375rem;\n\t\t\tborder-radius: 0.25rem;\n\t\t\tfont-size: 0.75rem;\n\t\t\tfont-weight: 600;\n\t\t}\n\t\t\n\t\t.permissions-list {\n\t\t\tdisplay: flex;\n\t\t\tflex-wrap: wrap;\n\t\t\tgap: 0.5rem;\n\t\t\tflex: 1;\n\t\t}\n\t\t\n\t\t.permission-item {\n\t\t\tbackground: #fef3c7;\n\t\t\tcolor: #92400e;\n\t\t\tpadding: 0.25rem 0.5rem;\n\t\t\tborder-radius: 0.25rem;\n\t\t\tfont-size: 0.8125rem;\n\t\t\tfont-weight: 500;\n\t\t}\n\t\t\n\t\t.badge {\n\t\t\tpadding: 0.25rem 0.5rem;\n\t\t\tborder-radius: 0.25rem;\n\t\t\tfont-size: 0.75rem;\n\t\t\tfont-weight: 500;\n\t\t\tdisplay: inline-flex;\n\t\t\talign-items: center;\n\t\t\tgap: 0.25rem;\n\t\t}\n\t\t.badge-success {\n\t\t\tbackground-color: #d1fae5;\n\t\t\tcolor: #065f46;\n\t\t}\n\t\t.badge-warning {\n\t\t\tbackground-color: #fef3c7;\n\t\t\tcolor: #92400e;\n\t\t}\n\t\t.badge-danger {\n\t\t\tbackground-color: #fee2e2;\n\t\t\tcolor: #991b1b;\n\t\t}\n\t\t.badge-secondary {\n\t\t\tbackground-color: #f3f4f6;\n\t\t\tcolor: #4b5563;\n\t\t}\n\t\t\n\t\t.btn-icon {\n\t\t\tpadding: 0.375rem;\n\t\t\tborder: 1px solid #e5e7eb;\n\t\t\tbackground: white;\n\t\t\tborder-radius: 0.375rem;\n\t\t\tcursor: pointer;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\ttransition: all 0.2s;\n\t\t}\n\t\t\n\t\t.btn-icon:hover {\n\t\t\tbackground: #f3f4f6;\n\t\t}\n\t\t\n\t\t.btn-secondary {\n\t\t\tdisplay: inline-flex;\n\t\t\talign-items: center;\n\t\t\tgap: 0.5rem;\n\t\t\tpadding: 0.5rem 1rem;\n\t\t\tbackground: #f3f4f6;\n\t\t\tborder: 1px solid #d1d5db;\n\t\t\tborder-radius: 0.375rem;\n\t\t\tfont-size: 0.875rem;\n\t\t\tcursor: pointer;\n\t\t\ttransition: background-color 0.2s;\n\t\t}\n\t\t\n\t\t.btn-secondary:hover {\n\t\t\tbackground: #e5e7eb;\n\t\t}\n\t</style><script>\n\t\tfunction toggleExtension(header) {\n\t\t\tconst item = header.closest('.extension-item');\n\t\t\titem.classList.toggle('expanded');\n\t\t}\n\t\t\n\t\tfunction copyToClipboard(text) {\n\t\t\tconst fullUrl = window.location.origin + text;\n\t\t\tnavigator.clipboard.writeText(fullUrl).then(() => {\n\t\t\t\tshowNotification('URL copied to clipboard!', 'success');\n\t\t\t}).catch(() => {\n\t\t\t\t// Fallback\n\t\t\t\tconst textArea = document.createElement('textarea');\n\t\t\t\ttextArea.value = fullUrl;\n\t\t\t\tdocument.body.appendChild(textArea);\n\t\t\t\ttextArea.select();\n\t\t\t\tdocument.execCommand('copy');\n\t\t\t\tdocument.body.removeChild(textArea);\n\t\t\t\tshowNotification('URL copied to clipboard!', 'success');\n\t\t\t});\n\t\t}\n\t\t\n\t\t// Initialize Lucide icons when the DOM is ready\n\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\tif (typeof lucide !== 'undefined') {\n\t\t\t\tlucide.createIcons();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Re-initialize icons after HTMX updates\n\t\tdocument.body.addEventListener('htmx:afterSwap', function() {\n\t\t\tif (typeof lucide !== 'undefined') {\n\t\t\t\tlucide.createIcons();\n\t\t\t}\n\t\t});\n\t</script><script src=\"/static/js/extensions.js\" type=\"module\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ExtensionsAccordionPage(data ExtensionsAccordionPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var20 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var20 == nil {
			templ_7745c5c3_Var20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var21 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = ExtensionsAccordionContent(data).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layouts.Base(layouts.BaseProps{
			Title:     "Extensions",
			UserEmail: data.UserEmail,
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var21), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ExtensionsAccordionPartial(data ExtensionsAccordionPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var22 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var22 == nil {
			templ_7745c5c3_Var22 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var23 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = ExtensionsAccordionContent(data).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layouts.PartialContent("Extensions").Render(templ.WithChildren(ctx, templ_7745c5c3_Var23), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Helper functions
func countEnabledExtensionsAccordion(extensions []ExtensionInfoAccordion) int {
	count := 0
	for _, ext := range extensions {
		if ext.Enabled {
			count++
		}
	}
	return count
}

func countHealthyExtensionsAccordion(extensions []ExtensionInfoAccordion) int {
	count := 0
	for _, ext := range extensions {
		if ext.Health == "healthy" {
			count++
		}
	}
	return count
}

func countExtensionsWithRoutesAccordion(extensions []ExtensionInfoAccordion) int {
	count := 0
	for _, ext := range extensions {
		if len(ext.Routes) > 0 {
			count++
		}
	}
	return count
}

func getBaseURL() string {
	// This would typically come from configuration
	// For now, we'll return empty string and let JavaScript handle it
	return ""
}

var _ = templruntime.GeneratedTemplate
