package pages

import (
	"github.com/suppers-ai/dufflebagbase/views/layouts"
	"fmt"
)

type SettingsData struct {
	UserEmail        string
	AppName          string
	AppVersion       string
	Environment      string
	DatabaseHost     string
	DatabaseName     string
	S3Endpoint       string
	S3Bucket         string
	SMTPHost         string
	SMTPPort         int
	EnableSignup     bool
	EnableAPI        bool
	RateLimitEnabled bool
	RateLimitRPM     int
	LogLevel         string
	MaintenanceMode  bool
}

templ SettingsContent(data SettingsData) {
	<div class="settings-container">
		<div class="settings-header">
			<h1>Settings</h1>
			<p class="settings-subtitle">Configure your application preferences and system settings</p>
		</div>

		<!-- Tab Navigation -->
		<div class="settings-tabs">
			<button class="tab-btn active" data-tab="general" onclick="switchTab('general')">
				<i data-lucide="settings" class="tab-icon"></i>
				<span>General</span>
			</button>
			<button class="tab-btn" data-tab="security" onclick="switchTab('security')">
				<i data-lucide="shield" class="tab-icon"></i>
				<span>Security</span>
			</button>
			<button class="tab-btn" data-tab="infrastructure" onclick="switchTab('infrastructure')">
				<i data-lucide="server" class="tab-icon"></i>
				<span>Infrastructure</span>
			</button>
			<button class="tab-btn" data-tab="advanced" onclick="switchTab('advanced')">
				<i data-lucide="sliders" class="tab-icon"></i>
				<span>Advanced</span>
			</button>
		</div>

		<!-- Tab Content -->
		<div class="tab-content">
			<!-- General Tab -->
			<div id="general-tab" class="tab-pane active">
				<div class="settings-card">
					<div class="card-header">
						<h3>Application Settings</h3>
						<span class="badge">v{ data.AppVersion }</span>
					</div>
					<form id="appSettingsForm" onsubmit="saveAppSettings(event)">
						<div class="form-row">
							<div class="form-col">
								<label for="appName">Application Name</label>
								<input type="text" id="appName" name="appName" value={ data.AppName } class="form-input"/>
							</div>
							<div class="form-col">
								<label>Environment</label>
								<div class="info-display">
									<span class="info-value">{ data.Environment }</span>
									<i data-lucide="info" class="info-icon"></i>
								</div>
							</div>
						</div>
						
						<div class="toggle-group">
							<label class="toggle-label">
								<input type="checkbox" id="maintenanceMode" name="maintenanceMode" checked?={ data.MaintenanceMode } class="toggle-switch"/>
								<span class="toggle-slider"></span>
								<div class="toggle-text">
									<span class="toggle-title">Maintenance Mode</span>
									<span class="toggle-desc">Temporarily disable access for maintenance</span>
								</div>
							</label>
						</div>
						
						<div class="form-footer">
							<button type="submit" class="btn btn-primary">
								<i data-lucide="save" class="btn-icon"></i>
								Save Changes
							</button>
						</div>
					</form>
				</div>

				<div class="settings-card">
					<div class="card-header">
						<h3>Email Configuration</h3>
						<button class="btn btn-sm btn-outline" onclick="sendTestEmail()">
							<i data-lucide="send" class="btn-icon"></i>
							Test Email
						</button>
					</div>
					<div class="info-grid">
						<div class="info-item">
							<span class="info-label">SMTP Host</span>
							<span class="info-value">{ data.SMTPHost }</span>
						</div>
						<div class="info-item">
							<span class="info-label">SMTP Port</span>
							<span class="info-value">{ fmt.Sprintf("%d", data.SMTPPort) }</span>
						</div>
					</div>
				</div>
			</div>

			<!-- Security Tab -->
			<div id="security-tab" class="tab-pane">
				<div class="settings-card">
					<div class="card-header">
						<h3>Authentication & Access</h3>
					</div>
					<form id="authSettingsForm" onsubmit="saveAuthSettings(event)">
						<div class="toggle-group">
							<label class="toggle-label">
								<input type="checkbox" id="enableSignup" name="enableSignup" checked?={ data.EnableSignup } class="toggle-switch"/>
								<span class="toggle-slider"></span>
								<div class="toggle-text">
									<span class="toggle-title">Enable User Registration</span>
									<span class="toggle-desc">Allow new users to create accounts</span>
								</div>
							</label>
							
							<label class="toggle-label">
								<input type="checkbox" id="enableAPI" name="enableAPI" checked?={ data.EnableAPI } class="toggle-switch"/>
								<span class="toggle-slider"></span>
								<div class="toggle-text">
									<span class="toggle-title">API Access</span>
									<span class="toggle-desc">Enable programmatic access via REST API</span>
								</div>
							</label>
						</div>
						<div class="form-footer">
							<button type="submit" class="btn btn-primary">
								<i data-lucide="shield-check" class="btn-icon"></i>
								Update Security Settings
							</button>
						</div>
					</form>
				</div>

				<div class="settings-card">
					<div class="card-header">
						<h3>Rate Limiting</h3>
					</div>
					<form id="rateLimitForm" onsubmit="saveRateLimitSettings(event)">
						<div class="toggle-group">
							<label class="toggle-label">
								<input type="checkbox" id="rateLimitEnabled" name="rateLimitEnabled" checked?={ data.RateLimitEnabled } class="toggle-switch"/>
								<span class="toggle-slider"></span>
								<div class="toggle-text">
									<span class="toggle-title">Enable Rate Limiting</span>
									<span class="toggle-desc">Protect against abuse and DDoS attacks</span>
								</div>
							</label>
						</div>
						
						<div class="form-row">
							<div class="form-col">
								<label for="rateLimitRPM">Requests Per Minute</label>
								<div class="input-with-addon">
									<input type="number" id="rateLimitRPM" name="rateLimitRPM" value={ fmt.Sprintf("%d", data.RateLimitRPM) } min="1" max="1000" class="form-input"/>
									<span class="input-addon">RPM</span>
								</div>
							</div>
						</div>
						
						<div class="form-footer">
							<button type="submit" class="btn btn-primary">
								<i data-lucide="save" class="btn-icon"></i>
								Save Rate Limits
							</button>
						</div>
					</form>
				</div>
			</div>

			<!-- Infrastructure Tab -->
			<div id="infrastructure-tab" class="tab-pane">
				<div class="settings-card">
					<div class="card-header">
						<h3>Database</h3>
						<div class="btn-group">
							<button class="btn btn-sm btn-outline" onclick="testDatabaseConnection()">
								<i data-lucide="activity" class="btn-icon"></i>
								Test
							</button>
						</div>
					</div>
					<div class="info-grid">
						<div class="info-item">
							<span class="info-label">Host</span>
							<span class="info-value mono">{ data.DatabaseHost }</span>
						</div>
						<div class="info-item">
							<span class="info-label">Database</span>
							<span class="info-value mono">{ data.DatabaseName }</span>
						</div>
					</div>
				</div>

				<div class="settings-card">
					<div class="card-header">
						<h3>Storage</h3>
						<button class="btn btn-sm btn-outline" onclick="testStorageConnection()">
							<i data-lucide="activity" class="btn-icon"></i>
							Test
						</button>
					</div>
					<div class="info-grid">
						<div class="info-item">
							<span class="info-label">S3 Endpoint</span>
							<span class="info-value mono">{ data.S3Endpoint }</span>
						</div>
						<div class="info-item">
							<span class="info-label">Default Bucket</span>
							<span class="info-value mono">{ data.S3Bucket }</span>
						</div>
					</div>
				</div>
			</div>

			<!-- Advanced Tab -->
			<div id="advanced-tab" class="tab-pane">
				<div class="settings-card">
					<div class="card-header">
						<h3>Logging</h3>
					</div>
					<form id="loggingForm" onsubmit="saveLoggingSettings(event)">
						<div class="form-row">
							<div class="form-col">
								<label for="logLevel">Log Level</label>
								<select id="logLevel" name="logLevel" class="form-select">
									<option value="DEBUG" selected?={ data.LogLevel == "DEBUG" }>üîç DEBUG - All events</option>
									<option value="INFO" selected?={ data.LogLevel == "INFO" }>‚ÑπÔ∏è INFO - General info</option>
									<option value="WARN" selected?={ data.LogLevel == "WARN" }>‚ö†Ô∏è WARN - Warnings only</option>
									<option value="ERROR" selected?={ data.LogLevel == "ERROR" }>‚ùå ERROR - Errors only</option>
								</select>
							</div>
						</div>
						<div class="form-footer">
							<button type="submit" class="btn btn-primary">
								<i data-lucide="save" class="btn-icon"></i>
								Update Log Level
							</button>
						</div>
					</form>
				</div>

				<div class="settings-card danger">
					<div class="card-header">
						<h3>‚ö†Ô∏è Danger Zone</h3>
					</div>
					<p class="danger-warning">These actions are irreversible. Please proceed with caution.</p>
					<div class="danger-actions">
						<button class="btn btn-outline-danger" onclick="clearAllCaches()">
							<i data-lucide="trash-2" class="btn-icon"></i>
							Clear All Caches
						</button>
						<button class="btn btn-outline-danger" onclick="exportAllData()">
							<i data-lucide="download" class="btn-icon"></i>
							Export All Data
						</button>
						<button class="btn btn-danger" onclick="if(confirm('This will permanently delete all data. Are you sure?')) deleteAllData()">
							<i data-lucide="alert-triangle" class="btn-icon"></i>
							Delete All Data
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script src="/static/js/table.js"></script>
	<script src="/static/js/settings.js" type="module"></script>
}

templ SettingsPage(data SettingsData) {
	@layouts.Base(layouts.BaseProps{
		Title:     "Settings",
		UserEmail: data.UserEmail,
	}) {
		@SettingsContent(data)
	}
}

templ SettingsPartial(data SettingsData) {
	@layouts.PartialContent("Settings") {
		@SettingsContent(data)
	}
}