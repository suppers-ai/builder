package pages

import (
	"github.com/suppers-ai/dufflebagbase/views/layouts"
	"fmt"
	"time"
)

type LogsPageData struct {
	UserEmail    string
	Logs         []LogEntry
	TotalLogs    int
	CurrentPage  int
	PageSize     int
	LogLevels    []string
	SelectedLevel string
	SearchQuery  string
	TimeRange    string
}

type LogEntry struct {
	ID        string
	Level     string
	Message   string
	Path      string
	Method    string
	Status    int
	Duration  string
	UserIP    string
	UserID    string
	Error     string
	Details   map[string]interface{}
	CreatedAt time.Time
}

templ LogsContent(data LogsPageData) {
	<div class="logs-container">
		<!-- Top Controls -->
		<div class="logs-header">
			<div class="logs-title">
				<h2>System Logs</h2>
				<span class="logs-count">{ fmt.Sprintf("%d total logs", data.TotalLogs) }</span>
			</div>
			<div class="logs-actions">
				<button class="btn-secondary" onclick="refreshLogs()">
					<i data-lucide="refresh-cw"></i>
					Refresh
				</button>
				<button class="btn-secondary" onclick="exportLogs()">
					<i data-lucide="download"></i>
					Export
				</button>
				<button class="btn-secondary" onclick="clearLogs()">
					<i data-lucide="trash-2"></i>
					Clear
				</button>
			</div>
		</div>

		<!-- Search and Filters -->
		<div class="logs-filters">
			<div class="logs-search">
				<input 
					type="text" 
					placeholder="Search logs..." 
					class="search-input"
					value={ data.SearchQuery }
					onkeyup="searchLogs(this.value)"
					id="logsSearchInput"/>
				<i data-lucide="search" class="search-icon"></i>
			</div>
			
			<div class="logs-filter-group">
				<select class="filter-select" onchange="filterByLevel(this.value)" id="levelFilter">
					<option value="">All Levels</option>
					<option value="DEBUG" selected?={ data.SelectedLevel == "DEBUG" }>Debug</option>
					<option value="INFO" selected?={ data.SelectedLevel == "INFO" }>Info</option>
					<option value="WARN" selected?={ data.SelectedLevel == "WARN" }>Warning</option>
					<option value="ERROR" selected?={ data.SelectedLevel == "ERROR" }>Error</option>
				</select>
				
				<select class="filter-select" onchange="filterByTime(this.value)" id="timeFilter">
					<option value="1h" selected?={ data.TimeRange == "1h" }>Last Hour</option>
					<option value="6h" selected?={ data.TimeRange == "6h" }>Last 6 Hours</option>
					<option value="24h" selected?={ data.TimeRange == "24h" }>Last 24 Hours</option>
					<option value="7d" selected?={ data.TimeRange == "7d" }>Last 7 Days</option>
					<option value="30d" selected?={ data.TimeRange == "30d" }>Last 30 Days</option>
					<option value="all" selected?={ data.TimeRange == "all" }>All Time</option>
				</select>
			</div>
		</div>

		<!-- Request Graph -->
		<div class="logs-graph-card">
			<div class="graph-header">
				<h3>Request Activity</h3>
				<div class="graph-legend">
					<span class="legend-item">
						<span class="legend-dot" style="background: #10b981;"></span>
						Success
					</span>
					<span class="legend-item">
						<span class="legend-dot" style="background: #f59e0b;"></span>
						Warning
					</span>
					<span class="legend-item">
						<span class="legend-dot" style="background: #ef4444;"></span>
						Error
					</span>
				</div>
			</div>
			<div class="graph-container">
				<canvas id="logsChart"></canvas>
			</div>
		</div>

		<!-- Logs Table -->
		<div class="logs-table-card">
			<table class="logs-table">
				<thead>
					<tr>
						<th class="log-checkbox">
							<input type="checkbox" onclick="toggleAllLogs(this)"/>
						</th>
						<th class="log-level">Level</th>
						<th class="log-time">Time</th>
						<th class="log-method">Method</th>
						<th class="log-path">Path</th>
						<th class="log-status">Status</th>
						<th class="log-duration">Duration</th>
						<th class="log-message">Message</th>
						<th class="log-user">User</th>
						<th class="log-actions">Actions</th>
					</tr>
				</thead>
				<tbody>
					if len(data.Logs) > 0 {
						for _, log := range data.Logs {
							<tr class={ "log-row", fmt.Sprintf("log-%s", log.Level) } data-log-id={ log.ID }>
								<td class="log-checkbox">
									<input type="checkbox" name="log-select"/>
								</td>
								<td class="log-level">
									<span class={ "level-badge", fmt.Sprintf("level-%s", log.Level) }>
										{ log.Level }
									</span>
								</td>
								<td class="log-time" title={ log.CreatedAt.Format("2006-01-02 15:04:05") }>
									{ formatLogTime(log.CreatedAt) }
								</td>
								<td class="log-method">
									if log.Method != "" {
										<span class={ "method-badge", fmt.Sprintf("method-%s", log.Method) }>
											{ log.Method }
										</span>
									}
								</td>
								<td class="log-path" title={ log.Path }>
									{ truncatePath(log.Path) }
								</td>
								<td class="log-status">
									if log.Status > 0 {
										<span class={ "status-badge", getStatusClass(log.Status) }>
											{ fmt.Sprintf("%d", log.Status) }
										</span>
									}
								</td>
								<td class="log-duration">
									{ log.Duration }
								</td>
								<td class="log-message" title={ log.Message }>
									{ truncateMessage(log.Message) }
									if log.Error != "" {
										<span class="log-error-indicator" title={ log.Error }>
											<i data-lucide="alert-circle"></i>
										</span>
									}
								</td>
								<td class="log-user">
									if log.UserID != "" {
										<span title={ log.UserID }>{ truncateUser(log.UserID) }</span>
									}
									if log.UserIP != "" {
										<span class="log-ip">{ log.UserIP }</span>
									}
								</td>
								<td class="log-actions">
									<button class="btn-icon-sm" data-log-id={ log.ID } onclick="viewLogDetails(this.dataset.logId)" title="View Details">
										<i data-lucide="eye"></i>
									</button>
									<button class="btn-icon-sm" data-log-id={ log.ID } onclick="copyLog(this.dataset.logId)" title="Copy">
										<i data-lucide="copy"></i>
									</button>
								</td>
							</tr>
						}
					} else {
						<tr>
							<td colspan="10" class="empty-state">
								<div class="empty-logs">
									<i data-lucide="file-text" class="empty-icon"></i>
									<p>No logs found</p>
									<span>Adjust your filters or wait for new activity</span>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>

			<!-- Pagination -->
			<div class="logs-pagination">
				<div class="pagination-controls">
					<button class="pagination-btn" onclick="previousPage()" disabled?={ data.CurrentPage <= 1 }>
						<i data-lucide="chevron-left"></i>
					</button>
					<span class="pagination-info">
						Page { fmt.Sprintf("%d", data.CurrentPage) } of { fmt.Sprintf("%d", (data.TotalLogs + data.PageSize - 1) / data.PageSize) }
					</span>
					<button class="pagination-btn" onclick="nextPage()" disabled?={ data.CurrentPage * data.PageSize >= data.TotalLogs }>
						<i data-lucide="chevron-right"></i>
					</button>
					<select class="page-size-select" onchange="changePageSize(this.value)">
						<option value="50" selected?={ data.PageSize == 50 }>50 logs</option>
						<option value="100" selected?={ data.PageSize == 100 }>100 logs</option>
						<option value="200" selected?={ data.PageSize == 200 }>200 logs</option>
						<option value="500" selected?={ data.PageSize == 500 }>500 logs</option>
					</select>
				</div>
				<div class="pagination-stats">
					Showing { fmt.Sprintf("%d-%d", (data.CurrentPage-1)*data.PageSize+1, minLogs(data.CurrentPage*data.PageSize, data.TotalLogs)) } of { fmt.Sprintf("%d", data.TotalLogs) }
				</div>
			</div>
		</div>

		<!-- Log Details Modal -->
		<div id="logDetailsModal" class="modal">
			<div class="modal-content">
				<div class="modal-header">
					<h3>Log Details</h3>
					<button class="btn-icon" onclick="closeLogDetails()">
						<i data-lucide="x"></i>
					</button>
				</div>
				<div class="modal-body" id="logDetailsContent">
					<!-- Details will be loaded here -->
				</div>
			</div>
		</div>
	</div>

	<!-- Chart.js for graph -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script src="/static/js/logs.js"></script>
	
	<!-- Initialize logs page -->
	<script>
		(function() {
			// Function to try initialization
			function tryInitializeLogs() {
				if (typeof window.initializeLogsPage === 'function') {
					console.log('Initializing logs page from inline script');
					window.initializeLogsPage();
				} else {
					console.log('Logs function not ready, retrying...');
					setTimeout(tryInitializeLogs, 100);
				}
			}
			
			// Start initialization with a small delay to ensure scripts are loaded
			setTimeout(tryInitializeLogs, 100);
		})();
	</script>
}

templ LogsPage(data LogsPageData) {
	@layouts.Base(layouts.BaseProps{
		Title:     "Logs",
		UserEmail: data.UserEmail,
	}) {
		@LogsContent(data)
	}
}

templ LogsPartial(data LogsPageData) {
	@layouts.PartialContent("Logs") {
		@LogsContent(data)
	}
}

// Helper functions
func formatLogTime(t time.Time) string {
	now := time.Now()
	diff := now.Sub(t)
	
	if diff < time.Minute {
		return fmt.Sprintf("%ds ago", int(diff.Seconds()))
	} else if diff < time.Hour {
		return fmt.Sprintf("%dm ago", int(diff.Minutes()))
	} else if diff < 24*time.Hour {
		return fmt.Sprintf("%dh ago", int(diff.Hours()))
	}
	return t.Format("Jan 2, 15:04")
}

func truncatePath(path string) string {
	if len(path) > 40 {
		return path[:37] + "..."
	}
	return path
}

func truncateMessage(msg string) string {
	if len(msg) > 60 {
		return msg[:57] + "..."
	}
	return msg
}

func truncateUser(user string) string {
	if len(user) > 20 {
		return user[:17] + "..."
	}
	return user
}

func getStatusClass(status int) string {
	if status >= 200 && status < 300 {
		return "status-success"
	} else if status >= 300 && status < 400 {
		return "status-redirect"
	} else if status >= 400 && status < 500 {
		return "status-warning"
	}
	return "status-error"
}

func minLogs(a, b int) int {
	if a < b {
		return a
	}
	return b
}