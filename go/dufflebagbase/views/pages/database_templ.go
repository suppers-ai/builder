// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/suppers-ai/dufflebagbase/services"
	"github.com/suppers-ai/dufflebagbase/views/components"
	"github.com/suppers-ai/dufflebagbase/views/layouts"
)

type DatabasePageData struct {
	UserEmail     string
	Collections   []services.CollectionInfo
	SelectedTable string
	TableData     []map[string]interface{}
	TableColumns  []string
	TotalRecords  int
	CurrentPage   int
	PageSize      int
}

func DatabasePage(data DatabasePageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container\"><div class=\"page-header\"><h1>Database</h1><div class=\"header-actions\"><select id=\"tableSelect\" onchange=\"selectTable(this.value)\" class=\"select\"><option value=\"\">Select a collection...</option> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, col := range data.Collections {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<option value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(col.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/database.templ`, Line: 34, Col: 32}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if col.Name == data.SelectedTable {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " selected")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, ">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(col.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/database.templ`, Line: 35, Col: 19}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, " (")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d records", col.RecordCount))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/database.templ`, Line: 35, Col: 67}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, ")</option>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</select> <button class=\"btn btn-primary\" onclick=\"showCreateCollectionModal()\">Create Collection</button></div></div><div class=\"stats-grid\"><div class=\"stat-card\"><h3>Total Collections</h3><div class=\"stat-value\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", len(data.Collections)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/database.templ`, Line: 48, Col: 72}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</div></div><div class=\"stat-card\"><h3>Total Records</h3><div class=\"stat-value\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", getTotalRecords(data.Collections)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/database.templ`, Line: 52, Col: 84}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</div></div><div class=\"stat-card\"><h3>Selected Collection</h3><div class=\"stat-value\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if data.SelectedTable != "" {
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(data.SelectedTable)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/database.templ`, Line: 58, Col: 28}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "-")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if data.SelectedTable != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<div class=\"table-section\"><div class=\"section-header\"><h2>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 string
				templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(data.SelectedTable)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/pages/database.templ`, Line: 69, Col: 31}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</h2><button class=\"btn btn-sm\" onclick=\"exportData()\">Export CSV</button> <button class=\"btn btn-sm btn-primary\" onclick=\"showAddRecordModal()\">Add Record</button></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = components.Table(components.TableData{
					Columns: makeTableColumns(data.TableColumns),
					Rows:    dataToTableRows(data.TableData),
					Empty:   "No records found in this collection",
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if data.TotalRecords > data.PageSize {
					templ_7745c5c3_Err = components.Pagination(components.PaginationData{
						CurrentPage: data.CurrentPage,
						TotalPages:  (data.TotalRecords + data.PageSize - 1) / data.PageSize,
						PageSize:    data.PageSize,
						TotalItems:  data.TotalRecords,
					}, fmt.Sprintf("/database?table=%s", data.SelectedTable)).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<div class=\"empty-state\"><p>Select a collection to view its data</p></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "</div><!-- Create Collection Modal --> <div id=\"createCollectionModal\" class=\"modal\"><div class=\"modal-content\"><div class=\"modal-header\"><h2>Create Collection</h2><span class=\"close\" onclick=\"hideCreateCollectionModal()\">&times;</span></div><form id=\"createCollectionForm\" onsubmit=\"createCollection(event)\"><div class=\"form-group\"><label for=\"collectionName\">Collection Name</label> <input type=\"text\" id=\"collectionName\" name=\"name\" required pattern=\"[a-z0-9_]+\"> <small>Lowercase letters, numbers, and underscores only</small></div><div class=\"form-group\"><label for=\"schema\">Schema (JSON)</label> <textarea id=\"schema\" name=\"schema\" rows=\"10\" placeholder='{\"fields\": {\"name\": \"string\", \"age\": \"integer\"}}'></textarea></div><div class=\"form-actions\"><button type=\"button\" class=\"btn btn-secondary\" onclick=\"hideCreateCollectionModal()\">Cancel</button> <button type=\"submit\" class=\"btn btn-primary\">Create Collection</button></div></form></div></div><!-- Add Record Modal --> <div id=\"addRecordModal\" class=\"modal\"><div class=\"modal-content\"><div class=\"modal-header\"><h2>Add Record</h2><span class=\"close\" onclick=\"hideAddRecordModal()\">&times;</span></div><form id=\"addRecordForm\" onsubmit=\"addRecord(event)\"><div id=\"recordFields\"></div><div class=\"form-actions\"><button type=\"button\" class=\"btn btn-secondary\" onclick=\"hideAddRecordModal()\">Cancel</button> <button type=\"submit\" class=\"btn btn-primary\">Add Record</button></div></form></div></div><script src=\"/static/js/database.js\" type=\"module\"></script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layouts.Base(layouts.BaseProps{
			Title:     "Database",
			UserEmail: data.UserEmail,
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func makeTableColumns(columns []string) []components.TableColumn {
	cols := make([]components.TableColumn, len(columns)+1)
	for i, col := range columns {
		cols[i] = components.TableColumn{
			Key:   col,
			Label: col,
			Width: "",
		}
	}
	// Add actions column
	cols[len(columns)] = components.TableColumn{
		Key:   "actions",
		Label: "Actions",
		Width: "150px",
	}
	return cols
}

func getTotalRecords(collections []services.CollectionInfo) int {
	total := 0
	for _, col := range collections {
		total += col.RecordCount
	}
	return total
}

func dataToTableRows(data []map[string]interface{}) []components.TableRow {
	rows := make([]components.TableRow, len(data))
	for i, record := range data {
		row := make(components.TableRow)
		for key, value := range record {
			// Convert value to string representation
			switch v := value.(type) {
			case nil:
				row[key] = "-"
			case string:
				row[key] = v
			case float64:
				row[key] = fmt.Sprintf("%.2f", v)
			case bool:
				if v {
					row[key] = "Yes"
				} else {
					row[key] = "No"
				}
			default:
				row[key] = fmt.Sprintf("%v", v)
			}
		}
		// Add actions
		if id, ok := record["id"].(string); ok {
			row["actions"] = templ.Raw(fmt.Sprintf(`
				<button class="btn btn-sm" onclick="editRecord('%s')">Edit</button>
				<button class="btn btn-sm btn-danger" onclick="deleteRecord('%s', '%s')">Delete</button>
			`, id, data[0]["collection_name"], id))
		}
		rows[i] = row
	}
	return rows
}

var _ = templruntime.GeneratedTemplate
