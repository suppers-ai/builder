package pages

import (
	"github.com/suppers-ai/dufflebagbase/views/layouts"
	"github.com/suppers-ai/dufflebagbase/views/components"
	"fmt"
	"time"
)

type StorageFile struct {
	Name         string
	Size         int64
	ContentType  string
	LastModified time.Time
	URL          string
}

type StorageBucket struct {
	Name       string
	FileCount  int
	TotalSize  int64
	CreatedAt  time.Time
}

type StoragePageData struct {
	UserEmail       string
	Buckets         []StorageBucket
	SelectedBucket  string
	Files           []StorageFile
	TotalFiles      int
	TotalSize       int64
	CurrentPage     int
	PageSize        int
}

templ StoragePage(data StoragePageData) {
	@layouts.Base(layouts.BaseProps{
		Title:     "Storage",
		UserEmail: data.UserEmail,
	}) {
			<div class="container">
				<div class="page-header">
					<h1>Storage</h1>
					<div class="header-actions">
						<select id="bucketSelect" onchange="selectBucket(this.value)" class="select">
							<option value="">Select a bucket...</option>
							for _, bucket := range data.Buckets {
								<option value={ bucket.Name } selected?={ bucket.Name == data.SelectedBucket }>
									{ bucket.Name } ({ fmt.Sprintf("%d files", bucket.FileCount) })
								</option>
							}
						</select>
						<button class="btn btn-primary" onclick="showUploadModal()">
							Upload File
						</button>
					</div>
				</div>

				<div class="stats-grid">
					<div class="stat-card">
						<h3>Total Buckets</h3>
						<div class="stat-value">{ fmt.Sprintf("%d", len(data.Buckets)) }</div>
					</div>
					<div class="stat-card">
						<h3>Total Files</h3>
						<div class="stat-value">{ fmt.Sprintf("%d", data.TotalFiles) }</div>
					</div>
					<div class="stat-card">
						<h3>Total Storage</h3>
						<div class="stat-value">{ formatBytes(data.TotalSize) }</div>
					</div>
				</div>

				if data.SelectedBucket != "" {
					<div class="table-section">
						<div class="section-header">
							<h2>{ data.SelectedBucket }</h2>
							<div class="actions">
								<button class="btn btn-sm" onclick="createFolder()">Create Folder</button>
								<button class="btn btn-sm btn-primary" onclick="showUploadModal()">Upload</button>
							</div>
						</div>

						@components.Table(components.TableData{
							Columns: []components.TableColumn{
								{Key: "name", Label: "Name", Width: "40%"},
								{Key: "size", Label: "Size", Width: "15%"},
								{Key: "type", Label: "Type", Width: "15%"},
								{Key: "modified", Label: "Modified", Width: "20%"},
								{Key: "actions", Label: "Actions", Width: "10%"},
							},
							Rows: filesToTableRows(data.Files),
							Empty: "No files in this bucket",
						})

						if data.TotalFiles > data.PageSize {
							@components.Pagination(components.PaginationData{
								CurrentPage: data.CurrentPage,
								TotalPages:  (data.TotalFiles + data.PageSize - 1) / data.PageSize,
								PageSize:    data.PageSize,
								TotalItems:  data.TotalFiles,
							}, fmt.Sprintf("/storage?bucket=%s", data.SelectedBucket))
						}
					</div>
				} else {
					<div class="empty-state">
						<p>Select a bucket to view its files</p>
					</div>
				}
			</div>

		<!-- Upload Modal -->
		<div id="uploadModal" class="modal">
			<div class="modal-content">
				<div class="modal-header">
					<h2>Upload File</h2>
					<span class="close" onclick="hideUploadModal()">&times;</span>
				</div>
				<form id="uploadForm" onsubmit="uploadFile(event)">
					<div class="form-group">
						<label for="bucket">Bucket</label>
						<select id="bucket" name="bucket" required>
							for _, bucket := range data.Buckets {
								<option value={ bucket.Name } selected?={ bucket.Name == data.SelectedBucket }>
									{ bucket.Name }
								</option>
							}
						</select>
					</div>
					<div class="form-group">
						<label for="file">File</label>
						<input type="file" id="file" name="file" required/>
					</div>
					<div class="form-group">
						<label for="path">Path (optional)</label>
						<input type="text" id="path" name="path" placeholder="/folder/subfolder/"/>
					</div>
					<div class="upload-progress" style="display:none;">
						<div class="progress-bar">
							<div class="progress-fill" id="progressFill"></div>
						</div>
						<span id="progressText">0%</span>
					</div>
					<div class="form-actions">
						<button type="button" class="btn btn-secondary" onclick="hideUploadModal()">Cancel</button>
						<button type="submit" class="btn btn-primary">Upload</button>
					</div>
				</form>
			</div>
		</div>

		<script src="/static/js/storage.js" type="module"></script>
	}
}

func filesToTableRows(files []StorageFile) []components.TableRow {
	rows := make([]components.TableRow, len(files))
	for i, file := range files {
		rows[i] = components.TableRow{
			"name":     file.Name,
			"size":     formatBytes(file.Size),
			"type":     file.ContentType,
			"modified": file.LastModified.Format("2006-01-02 15:04"),
			"actions": templ.Raw(fmt.Sprintf(`
				<button class="btn btn-sm" onclick="downloadFile('%s')">Download</button>
				<button class="btn btn-sm btn-danger" onclick="deleteFile('%s')">Delete</button>
			`, file.URL, file.Name)),
		}
	}
	return rows
}

func formatBytes(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}