package pages

import (
	"github.com/suppers-ai/dufflebagbase/views/layouts"
	"github.com/suppers-ai/dufflebagbase/views/components"
	"fmt"
	"strings"
	"time"
)

type StorageFile struct {
	Name         string
	Size         int64
	ContentType  string
	LastModified time.Time
	URL          string
	Path         string
}

type StorageBucket struct {
	Name       string
	FileCount  int
	TotalSize  int64
	CreatedAt  time.Time
	Public     bool
}

type Breadcrumb struct {
	Name string
	Path string
}

type StoragePageData struct {
	UserEmail       string
	Buckets         []StorageBucket
	SelectedBucket  string
	SelectedPath    string
	Files           []StorageFile
	Folders         []string
	Breadcrumbs     []Breadcrumb
	TotalFiles      int
	TotalSize       int64
	CurrentPage     int
	PageSize        int
	TotalItems      int
}

templ StorageContent(data StoragePageData) {
	<div class="storage-container">
		<!-- Sidebar with buckets -->
		<div class="storage-sidebar">
			<div class="sidebar-header">
				<h2>Storage</h2>
				<button class="btn btn-sm btn-primary" onclick="showCreateBucketModal()">
					New bucket
				</button>
			</div>
			
			<div class="bucket-search">
				<input type="text" placeholder="Search buckets..." onkeyup="filterBuckets(this.value)" class="search-input" />
			</div>
			
			<div class="bucket-list">
				<h3>ALL BUCKETS</h3>
				for _, bucket := range data.Buckets {
					<div class={ "bucket-item", templ.KV("active", bucket.Name == data.SelectedBucket) } 
					     onclick="selectBucket(this)"
					     data-bucket={ bucket.Name }>
						<span class="bucket-name">{ bucket.Name }</span>
						<span class="bucket-count">({ fmt.Sprintf("%d", bucket.FileCount) })</span>
					</div>
				}
			</div>
			
			if data.SelectedBucket != "" {
				<div class="bucket-config">
					<h3>CONFIGURATION</h3>
					<div class="config-item" onclick="showBucketPolicies()">
						<span>Policies</span>
					</div>
					<div class="config-item" onclick="showBucketSettings()">
						<span>Settings</span>
					</div>
				</div>
			}
		</div>
		
		<!-- Main content area -->
		<div class="storage-main">
			if data.SelectedBucket != "" {
				<!-- Breadcrumb and actions bar -->
				<div class="storage-header">
					<div class="breadcrumbs">
						<span class="breadcrumb-item" onclick="navigateTo(this, '')" data-bucket={ data.SelectedBucket }>
							{ data.SelectedBucket }
						</span>
						for _, crumb := range data.Breadcrumbs[1:] {
							<span class="breadcrumb-separator">/</span>
							<span class="breadcrumb-item" onclick="window.location.href=this.dataset.path" data-path={ crumb.Path }>
								{ crumb.Name }
							</span>
						}
					</div>
					
					<div class="storage-actions">
						<button class="btn btn-sm" onclick="reloadStorage()">
							Reload
						</button>
						<button class="btn btn-sm" onclick="showFileViewer()">
							View
						</button>
						<button class="btn btn-sm btn-primary" onclick="showUploadModal()">
							Upload files
						</button>
						<button class="btn btn-sm" onclick="showCreateFolderModal()">
							Create folder
						</button>
					</div>
				</div>
				
				<!-- Files and folders grid/list -->
				<div class="storage-content">
					if len(data.Folders) == 0 && len(data.Files) == 0 {
						<div class="empty-storage">
							<img src="/static/img/empty-storage.svg" alt="Empty storage" />
							<h3>No files or folders</h3>
							<p>Upload files or create folders to get started</p>
							<button class="btn btn-primary" onclick="showUploadModal()">Upload files</button>
						</div>
					} else {
						<div class="file-list">
							<!-- Folders -->
							for _, folder := range data.Folders {
								<div class="file-item folder" onclick="navigateTo(this)" data-bucket={ data.SelectedBucket } data-path={ fmt.Sprintf("%s%s", data.SelectedPath, folder) }>
									<div class="file-checkbox">
										<input type="checkbox" onclick="event.stopPropagation()" />
									</div>
									<div class="file-icon">
										<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
											<path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
										</svg>
									</div>
									<div class="file-details">
										<div class="file-name">{ folder }</div>
										<div class="file-meta">Folder</div>
									</div>
								</div>
							}
							
							<!-- Files -->
							for _, file := range data.Files {
								<div class="file-item" onclick="selectFile(this)" data-bucket={ data.SelectedBucket } data-path={ fmt.Sprintf("%s%s", file.Path, file.Name) }>
									<div class="file-checkbox">
										<input type="checkbox" onclick="event.stopPropagation()" />
									</div>
									<div class="file-icon">
										@renderFileIcon(file.ContentType)
									</div>
									<div class="file-details">
										<div class="file-name">{ file.Name }</div>
										<div class="file-meta">
											{ file.ContentType } • { formatBytes(file.Size) }
										</div>
										<div class="file-date">
											Added on { file.LastModified.Format("1/2/2006, 3:04:05 PM") }
										</div>
									</div>
									<div class="file-actions">
										<button class="btn btn-sm" onclick="event.stopPropagation(); downloadFile(this)" data-bucket={ data.SelectedBucket } data-path={ fmt.Sprintf("%s%s", file.Path, file.Name) }>
											Download
										</button>
										<button class="btn btn-sm" onclick="event.stopPropagation(); showSignedURLModal(this)" 
											data-bucket={ data.SelectedBucket } 
											data-path={ fmt.Sprintf("%s%s", file.Path, file.Name) }
											data-filename={ file.Name }>
											Get URL
										</button>
										<button class="btn btn-sm btn-danger" onclick="event.stopPropagation(); deleteFile(this)" data-bucket={ data.SelectedBucket } data-path={ fmt.Sprintf("%s%s", file.Path, file.Name) }>
											Delete
										</button>
									</div>
								</div>
							}
						</div>
						
						if data.TotalItems > data.PageSize {
							@components.Pagination(components.PaginationData{
								CurrentPage: data.CurrentPage,
								TotalPages:  (data.TotalItems + data.PageSize - 1) / data.PageSize,
								PageSize:    data.PageSize,
								TotalItems:  data.TotalItems,
							}, fmt.Sprintf("/storage?bucket=%s&path=%s", data.SelectedBucket, data.SelectedPath))
						}
					}
				</div>
			} else {
				<div class="no-bucket-selected">
					<h2>Select a bucket</h2>
					<p>Select a bucket from the sidebar to view its contents</p>
				</div>
			}
		</div>
		
		<!-- File preview panel (hidden by default) -->
		<div id="filePreview" class="file-preview" style="display:none;">
			<div class="preview-header">
				<h3 id="previewFileName">File Name</h3>
				<button class="close-btn" onclick="closeFilePreview()">×</button>
			</div>
			<div class="preview-content">
				<img id="previewImage" style="display:none;max-width:100%;" />
				<pre id="previewText" style="display:none;"></pre>
				<div id="previewInfo">
					<p><strong>Type:</strong> <span id="previewType"></span></p>
					<p><strong>Size:</strong> <span id="previewSize"></span></p>
					<p><strong>Modified:</strong> <span id="previewModified"></span></p>
				</div>
			</div>
			<div class="preview-actions">
				<button class="btn btn-primary" id="downloadBtn">Download</button>
				<button class="btn" id="deleteBtn">Delete file</button>
			</div>
		</div>
	</div>
	
	<!-- Modals -->
	@createBucketModal()
	@uploadModal(data.Buckets, data.SelectedBucket, data.SelectedPath)
	@createFolderModal(data.SelectedBucket, data.SelectedPath)
	@signedURLModal()
	
	<script src="/static/js/storage.js"></script>
}

templ createBucketModal() {
	<div id="createBucketModal" class="modal" style="display:none;">
		<div class="modal-content">
			<div class="modal-header">
				<h2>Create New Bucket</h2>
				<span class="close" onclick="hideCreateBucketModal()">&times;</span>
			</div>
			<form id="createBucketForm" onsubmit="createBucket(event)">
				<div class="form-group">
					<label for="bucketName">Bucket Name</label>
					<input type="text" id="bucketName" name="name" required pattern="[a-z0-9\-]+" 
						placeholder="my-bucket-name" />
					<small>Only lowercase letters, numbers, and hyphens allowed</small>
				</div>
				<div class="form-group">
					<label>
						<input type="checkbox" name="public" />
						Make bucket public
					</label>
				</div>
				<div class="form-actions">
					<button type="button" class="btn btn-secondary" onclick="hideCreateBucketModal()">Cancel</button>
					<button type="submit" class="btn btn-primary">Create Bucket</button>
				</div>
			</form>
		</div>
	</div>
}

templ uploadModal(buckets []StorageBucket, selectedBucket, selectedPath string) {
	<div id="uploadModal" class="modal" style="display:none;">
		<div class="modal-content">
			<div class="modal-header">
				<h2>Upload Files</h2>
				<span class="close" onclick="hideUploadModal()">&times;</span>
			</div>
			<form id="uploadForm" onsubmit="uploadFiles(event)">
				<div class="form-group">
					<label for="uploadBucket">Bucket</label>
					<select id="uploadBucket" name="bucket" required>
						for _, bucket := range buckets {
							<option value={ bucket.Name } selected?={ bucket.Name == selectedBucket }>
								{ bucket.Name }
							</option>
						}
					</select>
				</div>
				<div class="form-group">
					<label for="uploadPath">Path</label>
					<input type="text" id="uploadPath" name="path" value={ selectedPath } 
						placeholder="/folder/subfolder/" />
				</div>
				<div class="form-group">
					<label for="files">Files</label>
					<input type="file" id="files" name="files" multiple required />
				</div>
				<div class="upload-progress" style="display:none;">
					<div class="progress-bar">
						<div class="progress-fill" id="progressFill"></div>
					</div>
					<span id="progressText">0%</span>
				</div>
				<div class="form-actions">
					<button type="button" class="btn btn-secondary" onclick="hideUploadModal()">Cancel</button>
					<button type="submit" class="btn btn-primary">Upload</button>
				</div>
			</form>
		</div>
	</div>
}

templ createFolderModal(selectedBucket, selectedPath string) {
	<div id="createFolderModal" class="modal" style="display:none;">
		<div class="modal-content">
			<div class="modal-header">
				<h2>Create Folder</h2>
				<span class="close" onclick="hideCreateFolderModal()">&times;</span>
			</div>
			<form id="createFolderForm" onsubmit="createFolder(event)">
				<input type="hidden" name="bucket" value={ selectedBucket } />
				<input type="hidden" name="path" value={ selectedPath } />
				<div class="form-group">
					<label for="folderName">Folder Name</label>
					<input type="text" id="folderName" name="name" required 
						placeholder="New Folder" />
				</div>
				<div class="form-actions">
					<button type="button" class="btn btn-secondary" onclick="hideCreateFolderModal()">Cancel</button>
					<button type="submit" class="btn btn-primary">Create Folder</button>
				</div>
			</form>
		</div>
	</div>
}

templ signedURLModal() {
	<div id="signedURLModal" class="modal" style="display:none;">
		<div class="modal-content" style="width: 500px;">
			<div class="modal-header">
				<h2>Get Signed URL</h2>
				<span class="close" onclick="hideSignedURLModal()">&times;</span>
			</div>
			<form id="signedURLForm">
				<input type="hidden" id="signedBucket" name="bucket" />
				<input type="hidden" id="signedPath" name="path" />
				<div class="form-group">
					<label>File: <span id="signedFileName" style="font-weight: normal;"></span></label>
				</div>
				<div class="form-group">
					<label for="expirySelect">Expires after</label>
					<select id="expirySelect" name="expiry" class="form-select" onchange="handleExpiryChange(this)">
						<option value="604800">1 week</option>
						<option value="2592000" selected>1 month</option>
						<option value="31536000">1 year</option>
						<option value="custom">Custom</option>
					</select>
				</div>
				<div class="form-group" id="customExpiryGroup" style="display:none;">
					<label for="customExpiry">Custom expiry (seconds)</label>
					<input type="number" id="customExpiry" name="customExpiry" min="60" max="31536000" 
						placeholder="Enter seconds (60 - 31536000)" />
				</div>
				<div class="form-group" id="urlResultGroup" style="display:none;">
					<label for="signedURLResult">Signed URL</label>
					<div style="display: flex; gap: 10px;">
						<input type="text" id="signedURLResult" readonly style="flex: 1;" />
						<button type="button" class="btn btn-sm" onclick="copySignedURL()">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
								<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
							</svg>
							Copy
						</button>
					</div>
					<small id="expiryNote" style="color: #666; margin-top: 5px; display: block;"></small>
				</div>
				<div class="form-actions">
					<button type="button" class="btn btn-secondary" onclick="hideSignedURLModal()">Close</button>
					<button type="button" class="btn btn-primary" onclick="generateSignedURL()">Generate URL</button>
				</div>
			</form>
		</div>
	</div>
}

templ renderFileIcon(contentType string) {
	if strings.HasPrefix(contentType, "image/") {
		<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
			<circle cx="8.5" cy="8.5" r="1.5"></circle>
			<polyline points="21 15 16 10 5 21"></polyline>
		</svg>
	} else if strings.HasPrefix(contentType, "text/") || strings.HasPrefix(contentType, "application/json") || strings.HasPrefix(contentType, "application/xml") {
		<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
			<polyline points="14 2 14 8 20 8"></polyline>
			<line x1="16" y1="13" x2="8" y2="13"></line>
			<line x1="16" y1="17" x2="8" y2="17"></line>
			<polyline points="10 9 9 9 8 9"></polyline>
		</svg>
	} else if strings.HasPrefix(contentType, "video/") {
		<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<polygon points="23 7 16 12 23 17 23 7"></polygon>
			<rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
		</svg>
	} else if strings.HasPrefix(contentType, "audio/") {
		<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<path d="M9 18V5l12-2v13"></path>
			<circle cx="6" cy="18" r="3"></circle>
			<circle cx="18" cy="16" r="3"></circle>
		</svg>
	} else if contentType == "application/pdf" {
		<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
			<polyline points="14 2 14 8 20 8"></polyline>
			<line x1="16" y1="13" x2="8" y2="13"></line>
			<line x1="16" y1="17" x2="8" y2="17"></line>
		</svg>
	} else if strings.HasPrefix(contentType, "application/zip") || strings.HasPrefix(contentType, "application/x-") || strings.HasPrefix(contentType, "application/gzip") {
		<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<path d="M22 10v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6l2-2h8a2 2 0 0 1 2 2v1"></path>
			<path d="M11 13L8 16l3 3"></path>
			<path d="M16 16l3-3-3-3"></path>
		</svg>
	} else {
		<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path>
			<polyline points="13 2 13 9 20 9"></polyline>
		</svg>
	}
}

templ StoragePage(data StoragePageData) {
	@layouts.Base(layouts.BaseProps{
		Title:     "Storage",
		UserEmail: data.UserEmail,
	}) {
		@StorageContent(data)
	}
}

templ StoragePartial(data StoragePageData) {
	@layouts.PartialContent("Storage") {
		@StorageContent(data)
	}
}

func getFileIcon(contentType string) string {
	switch {
	case contentType == "folder":
		return "📁"
	case contentType[:6] == "image/":
		return "🖼️"
	case contentType == "application/pdf":
		return "📄"
	case contentType[:5] == "text/", contentType == "application/json", contentType == "application/xml":
		return "📝"
	case contentType[:6] == "video/":
		return "🎥"
	case contentType[:6] == "audio/":
		return "🎵"
	case contentType == "application/zip", contentType == "application/x-tar", contentType == "application/gzip":
		return "📦"
	default:
		return "📎"
	}
}

func formatBytes(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}