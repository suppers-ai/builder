package pages

import (
    "github.com/suppers-ai/dufflebagbase/views/layouts"
    "github.com/suppers-ai/dufflebagbase/views/components"
    "github.com/suppers-ai/dufflebagbase/services"
    "fmt"
    "encoding/json"
)

type DashboardData struct {
    UserEmail   string
    Stats       services.DashboardStats
    Extensions  []components.ExtensionItem
}

templ DashboardContent(data DashboardData) {
    <style>
        /* Compact dashboard layout overrides */
        .dashboard-container {
            padding: 0.75rem !important;
            gap: 0.75rem !important;
        }
        .stats-overview, .stats-grid {
            gap: 0.5rem !important;
            margin-bottom: 0.75rem !important;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        }
        .stats-overview {
            grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
        }
        .stat-card {
            padding: 0.75rem !important;
            margin: 0 !important;
            min-height: auto !important;
        }
        .stat-card h3 {
            font-size: 0.8rem !important;
            margin-bottom: 0.25rem !important;
            font-weight: 600;
        }
        .stat-value {
            font-size: 1.25rem !important;
            margin: 0.25rem 0 !important;
            font-weight: bold;
        }
        .stat-label {
            font-size: 0.7rem !important;
            opacity: 0.8;
        }
        .stat-icon {
            width: 32px !important;
            height: 32px !important;
            margin-right: 0.5rem !important;
        }
        .chart-card {
            padding: 0.75rem !important;
            margin-bottom: 0.75rem !important;
        }
        .chart-header {
            margin-bottom: 0.5rem !important;
        }
        .chart-header h3 {
            font-size: 0.9rem !important;
            font-weight: 600;
        }
        .chart-subtitle {
            font-size: 0.7rem !important;
            opacity: 0.7;
        }
        .charts-section {
            gap: 0.75rem !important;
            margin-bottom: 0.75rem !important;
            display: grid;
            grid-template-columns: 1fr 1fr;
        }
        .collections-section {
            padding-top: 0 !important;
        }
        .section-header {
            margin-bottom: 0.75rem !important;
            padding-bottom: 0.5rem !important;
        }
        .collections-grid {
            gap: 0.5rem !important;
        }
        .collection-card {
            padding: 0.5rem !important;
        }
        .chart-container {
            height: 180px !important;
        }
        .gauge-stat {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            text-align: left;
        }
        .gauge-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }
        .gauge-container {
            position: relative;
            margin-bottom: 0.25rem;
        }
        .gauge-value {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1rem;
            font-weight: bold;
            color: #1f2937;
        }
        #cpuGauge, #memoryGauge, #diskGauge {
            width: 100px !important;
            height: 100px !important;
        }
        .gauge-stats {
            text-align: left;
        }
        .storage-section {
            margin-bottom: 0.75rem;
        }
        .storage-section h2 {
            font-size: 1.1rem !important;
            margin-bottom: 0.75rem !important;
            font-weight: 600;
        }
        .storage-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 0.5rem !important;
        }
    </style>
    <div class="dashboard-container">
        <!-- System Stats with Gauge Charts -->
        <div class="stats-overview">
            <div class="stat-card gauge-stat">
                <div class="gauge-header">
                    <div class="stat-icon cpu-icon">
                        <i data-lucide="cpu"></i>
                    </div>
                    <h3>CPU Usage</h3>
                </div>
                <div class="gauge-container">
                    <canvas id="cpuGauge" width="100" height="100"></canvas>
                    <div class="gauge-value">{ fmt.Sprintf("%.1f%%", data.Stats.SystemStats.CPUUsage) }</div>
                </div>
                <div class="gauge-stats">
                    <div class="stat-label">System Load</div>
                </div>
            </div>
            
            <div class="stat-card gauge-stat">
                <div class="gauge-header">
                    <div class="stat-icon memory-icon">
                        <i data-lucide="memory-stick"></i>
                    </div>
                    <h3>Memory Usage</h3>
                </div>
                <div class="gauge-container">
                    <canvas id="memoryGauge" width="100" height="100"></canvas>
                    <div class="gauge-value">{ fmt.Sprintf("%.1f%%", data.Stats.SystemStats.MemoryUsage) }</div>
                </div>
                <div class="gauge-stats">
                    <div class="stat-label">{ services.FormatBytes(int64(data.Stats.SystemStats.MemoryUsed)) } / { services.FormatBytes(int64(data.Stats.SystemStats.MemoryTotal)) }</div>
                </div>
            </div>
            
            <div class="stat-card gauge-stat">
                <div class="gauge-header">
                    <div class="stat-icon disk-icon">
                        <i data-lucide="hard-drive"></i>
                    </div>
                    <h3>Disk Usage</h3>
                </div>
                <div class="gauge-container">
                    <canvas id="diskGauge" width="100" height="100"></canvas>
                    <div class="gauge-value">{ fmt.Sprintf("%.1f%%", data.Stats.SystemStats.DiskUsage) }</div>
                </div>
                <div class="gauge-stats">
                    <div class="stat-label">{ services.FormatBytes(int64(data.Stats.SystemStats.DiskUsed)) } / { services.FormatBytes(int64(data.Stats.SystemStats.DiskTotal)) }</div>
                </div>
            </div>
        </div>

        <!-- Application Stats Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon users-icon">
                    <i data-lucide="users"></i>
                </div>
                <div class="stat-content">
                    <h3>Total Users</h3>
                    <div class="stat-value">{ fmt.Sprint(data.Stats.TotalUsers) }</div>
                    <div class="stat-label">{ fmt.Sprint(data.Stats.ActiveUsers) } active</div>
                </div>
            </div>
            
            
            <div class="stat-card">
                <div class="stat-icon api-icon">
                    <i data-lucide="activity"></i>
                </div>
                <div class="stat-content">
                    <h3>API Activity</h3>
                    <div class="stat-value">{ fmt.Sprint(data.Stats.APIRequests) }</div>
                    <div class="stat-label">Last 24 hours</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon uptime-icon">
                    <i data-lucide="clock"></i>
                </div>
                <div class="stat-content">
                    <h3>Uptime</h3>
                    <div class="stat-value">{ data.Stats.SystemStats.Uptime }</div>
                </div>
            </div>
        </div>

        <!-- Storage Statistics Section -->
        <div class="storage-section">
            <div class="storage-grid">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="database"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Total Storage</h3>
                        <div class="stat-value">{ services.FormatBytes(data.Stats.StorageStats["total_size"]) }</div>
                        <div class="stat-label">Used Space</div>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="files"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Total Files</h3>
                        <div class="stat-value">{ fmt.Sprint(data.Stats.StorageStats["total_files"]) }</div>
                        <div class="stat-label">All Files</div>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="image"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Images</h3>
                        <div class="stat-value">{ fmt.Sprint(data.Stats.StorageStats["total_images"]) }</div>
                        <div class="stat-label">Image Files</div>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="clock"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Recent Files</h3>
                        <div class="stat-value">{ fmt.Sprint(data.Stats.StorageStats["recent_files"]) }</div>
                        <div class="stat-label">Last 7 days</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="charts-section">
            <div class="chart-card">
                <div class="chart-header">
                    <h3>User Growth</h3>
                    <span class="chart-subtitle">Last 7 days</span>
                </div>
                <div class="chart-container">
                    <canvas id="userGrowthChart"></canvas>
                </div>
            </div>
            
            <div class="chart-card">
                <div class="chart-header">
                    <h3>API Activity</h3>
                    <span class="chart-subtitle">Last 24 hours</span>
                </div>
                <div class="chart-container">
                    <canvas id="apiActivityChart"></canvas>
                </div>
            </div>
        </div>

        <!-- System Metrics Section -->
        <div class="metrics-section">
            <h2 class="section-title">System Metrics</h2>
            <div class="stats-grid" id="system-metrics-grid">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="cpu"></i>
                    </div>
                    <div class="stat-content">
                        <h3>CPU Usage</h3>
                        <div class="stat-value" id="metric-cpu">--</div>
                        <div class="stat-label">Percent</div>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="hard-drive"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Memory</h3>
                        <div class="stat-value" id="metric-memory">--</div>
                        <div class="stat-label">Used</div>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="database"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Disk Usage</h3>
                        <div class="stat-value" id="metric-disk">--</div>
                        <div class="stat-label">Used</div>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="network"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Network I/O</h3>
                        <div class="stat-value" id="metric-network">--</div>
                        <div class="stat-label">Total</div>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="activity"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Requests/sec</h3>
                        <div class="stat-value" id="metric-rps">--</div>
                        <div class="stat-label">RPS</div>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="zap"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Goroutines</h3>
                        <div class="stat-value" id="metric-goroutines">--</div>
                        <div class="stat-label">Active</div>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="thermometer"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Load Average</h3>
                        <div class="stat-value" id="metric-load">--</div>
                        <div class="stat-label">1m average</div>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">
                        <i data-lucide="clock"></i>
                    </div>
                    <div class="stat-content">
                        <h3>Uptime</h3>
                        <div class="stat-value" id="metric-uptime">--</div>
                        <div class="stat-label">Duration</div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    
    <!-- Chart.js for graphs -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/static/js/dashboard.js"></script>
    
    <!-- Pass data to JavaScript and initialize -->
    <script>
        (function() {
            // Set dashboard data
            window.dashboardData = {
                userGrowth: {{ marshalJSON(data.Stats.UserGrowth) }},
                apiActivity: {{ marshalJSON(data.Stats.APIActivity) }},
                logStats: {{ marshalJSON(data.Stats.LogStats) }},
                systemStats: {
                    cpuUsage: {{ fmt.Sprintf("%.1f", data.Stats.SystemStats.CPUUsage) }},
                    memoryUsage: {{ fmt.Sprintf("%.1f", data.Stats.SystemStats.MemoryUsage) }},
                    diskUsage: {{ fmt.Sprintf("%.1f", data.Stats.SystemStats.DiskUsage) }}
                }
            };
            
            // Function to try initialization with retry limit
            let retryCount = 0;
            const maxRetries = 50; // 5 seconds max wait time
            
            function tryInitialize() {
                if (typeof window.initializeDashboard === 'function') {
                    console.log('Initializing dashboard from inline script');
                    window.initializeDashboard();
                } else if (retryCount < maxRetries) {
                    retryCount++;
                    console.log(`Dashboard function not ready, retry ${retryCount}/${maxRetries}...`);
                    setTimeout(tryInitialize, 100);
                } else {
                    console.error('Failed to initialize dashboard after maximum retries');
                }
            }
            
            // Start initialization with a small delay to ensure scripts are loaded
            setTimeout(tryInitialize, 100);
        })();
    </script>
}

templ DashboardPage(data DashboardData) {
    @layouts.Base(layouts.BaseProps{
        Title:      "Dashboard",
        UserEmail:  data.UserEmail,
        Extensions: data.Extensions,
    }) {
        @DashboardContent(data)
    }
}

templ DashboardPartial(data DashboardData) {
    @layouts.PartialContent("Dashboard") {
        @DashboardContent(data)
    }
}

// Helper functions
func formatUptime(seconds int64) string {
    days := seconds / 86400
    hours := (seconds % 86400) / 3600
    minutes := (seconds % 3600) / 60
    
    if days > 0 {
        return fmt.Sprintf("%dd %dh", days, hours)
    } else if hours > 0 {
        return fmt.Sprintf("%dh %dm", hours, minutes)
    }
    return fmt.Sprintf("%dm", minutes)
}

func marshalJSON(data interface{}) string {
    bytes, err := json.Marshal(data)
    if err != nil {
        return "[]"
    }
    return string(bytes)
}