package pages

import (
	"github.com/suppers-ai/dufflebagbase/views/layouts"
	"github.com/suppers-ai/dufflebagbase/views/components"
	"fmt"
	"time"
)

type User struct {
	ID        string
	Email     string
	Username  string
	Role      string
	Confirmed bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

type UsersPageData struct {
	UserEmail   string
	Users       []User
	TotalUsers  int
	CurrentPage int
	PageSize    int
}

templ UsersPage(data UsersPageData) {
	@layouts.Base(layouts.BaseProps{
		Title:     "Users",
		UserEmail: data.UserEmail,
	}) {
			<div class="container">
				<div class="page-header">
					<h1>Users</h1>
					<div class="header-actions">
						<button class="btn btn-primary" onclick="showCreateUserModal()">
							Add User
						</button>
					</div>
				</div>

				<div class="stats-grid">
					<div class="stat-card">
						<h3>Total Users</h3>
						<div class="stat-value">{ fmt.Sprintf("%d", data.TotalUsers) }</div>
					</div>
					<div class="stat-card">
						<h3>Confirmed Users</h3>
						<div class="stat-value">
							{ fmt.Sprintf("%d", countConfirmedUsers(data.Users)) }
						</div>
					</div>
					<div class="stat-card">
						<h3>Admin Users</h3>
						<div class="stat-value">
							{ fmt.Sprintf("%d", countAdminUsers(data.Users)) }
						</div>
					</div>
				</div>

				@components.Table(components.TableData{
					Columns: []components.TableColumn{
						{Key: "email", Label: "Email", Width: "25%"},
						{Key: "username", Label: "Username", Width: "15%"},
						{Key: "role", Label: "Role", Width: "10%"},
						{Key: "confirmed", Label: "Confirmed", Width: "10%"},
						{Key: "created", Label: "Created", Width: "20%"},
						{Key: "actions", Label: "Actions", Width: "20%"},
					},
					Rows: usersToTableRows(data.Users),
					Empty: "No users found",
				})

				if data.TotalUsers > data.PageSize {
					@components.Pagination(components.PaginationData{
						CurrentPage: data.CurrentPage,
						TotalPages:  (data.TotalUsers + data.PageSize - 1) / data.PageSize,
						PageSize:    data.PageSize,
						TotalItems:  data.TotalUsers,
					}, "/users")
				}
			</div>

		<!-- Create User Modal -->
		<div id="createUserModal" class="modal">
			<div class="modal-content">
				<div class="modal-header">
					<h2>Create User</h2>
					<span class="close" onclick="hideCreateUserModal()">&times;</span>
				</div>
				<form id="createUserForm" onsubmit="createUser(event)">
					<div class="form-group">
						<label for="email">Email</label>
						<input type="email" id="email" name="email" required/>
					</div>
					<div class="form-group">
						<label for="password">Password</label>
						<input type="password" id="password" name="password" required/>
					</div>
					<div class="form-group">
						<label for="username">Username</label>
						<input type="text" id="username" name="username"/>
					</div>
					<div class="form-group">
						<label for="role">Role</label>
						<select id="role" name="role">
							<option value="user">User</option>
							<option value="admin">Admin</option>
						</select>
					</div>
					<div class="form-actions">
						<button type="button" class="btn btn-secondary" onclick="hideCreateUserModal()">Cancel</button>
						<button type="submit" class="btn btn-primary">Create User</button>
					</div>
				</form>
			</div>
		</div>

		<script src="/static/js/users.js" type="module"></script>
	}
}

func usersToTableRows(users []User) []components.TableRow {
	rows := make([]components.TableRow, len(users))
	for i, user := range users {
		rows[i] = components.TableRow{
			"email":     user.Email,
			"username":  valueOrDash(user.Username),
			"role":      valueOrDash(user.Role),
			"confirmed": boolToYesNo(user.Confirmed),
			"created":   user.CreatedAt.Format("2006-01-02 15:04"),
			"actions": templ.Raw(fmt.Sprintf(`
				<button class="btn btn-sm" onclick="editUser('%s')">Edit</button>
				<button class="btn btn-sm btn-danger" onclick="deleteUser('%s')">Delete</button>
			`, user.ID, user.ID)),
		}
	}
	return rows
}

func countConfirmedUsers(users []User) int {
	count := 0
	for _, user := range users {
		if user.Confirmed {
			count++
		}
	}
	return count
}

func countAdminUsers(users []User) int {
	count := 0
	for _, user := range users {
		if user.Role == "admin" {
			count++
		}
	}
	return count
}

func valueOrDash(s string) string {
	if s == "" {
		return "-"
	}
	return s
}

func boolToYesNo(b bool) string {
	if b {
		return "Yes"
	}
	return "No"
}