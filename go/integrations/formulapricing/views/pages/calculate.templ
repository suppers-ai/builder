package pages

import (
    "formulapricing/views/layouts"
    "formulapricing/views/components"
    "fmt"
)

type CalculationResult struct {
    BasePrice  float64
    Conditions []ConditionResult
    FinalPrice float64
}

type ConditionResult struct {
    Name       string
    Multiplier float64
}

type CalculatePageData struct {
    UserEmail string
    UserRole  string
    Result    *CalculationResult
}

templ CalculatePage(data CalculatePageData) {
    @layouts.Base(layouts.BaseProps{
        Title:     "Calculate",
        UserEmail: data.UserEmail,
        UserRole:  data.UserRole,
    }) {
        @components.Navigation(getCalculateNavItems("calculate", data.UserRole))
        
        <div class="content">
            <h1>Calculate Pricing</h1>
            
            <form id="calculateForm" method="POST">
                <div class="form-group">
                    <label for="area">Area (sq ft)</label>
                    <input type="number" id="area" name="area" required step="0.01"/>
                </div>
                
                <div class="form-group">
                    <label for="floors">Number of Floors</label>
                    <input type="number" id="floors" name="floors" required step="1"/>
                </div>
                
                <button type="submit" class="btn btn-primary">Calculate</button>
            </form>
            
            if data.Result != nil {
                <div class="result-card">
                    <h3>Result</h3>
                    <p>Base Price: ${ fmt.Sprintf("%.2f", data.Result.BasePrice) }</p>
                    if len(data.Result.Conditions) > 0 {
                        <div>
                            <h4>Applied Conditions:</h4>
                            for _, cond := range data.Result.Conditions {
                                <p>{ cond.Name }: Ã—{ fmt.Sprintf("%.2f", cond.Multiplier) }</p>
                            }
                        </div>
                    }
                    <p class="final-price">Final Price: ${ fmt.Sprintf("%.2f", data.Result.FinalPrice) }</p>
                </div>
            }
        </div>
        
        <script src="/static/js/modules/calculate.js"></script>
    }
}

func getCalculateNavItems(active string, role string) []components.NavItem {
    items := []components.NavItem{
        {Label: "Dashboard", Path: "/dashboard", Active: active == "dashboard"},
        {Label: "Variables", Path: "/variables", Active: active == "variables"},
        {Label: "Calculations", Path: "/calculations", Active: active == "calculations"},
        {Label: "Conditions", Path: "/conditions", Active: active == "conditions"},
        {Label: "Pricing", Path: "/pricing", Active: active == "pricing"},
        {Label: "Calculate", Path: "/calculate", Active: active == "calculate"},
        {Label: "Purchases", Path: "/purchases", Active: active == "purchases"},
    }
    
    if role == "admin" {
        items = append(items, components.NavItem{Label: "Users", Path: "/users", Active: active == "users"})
    }
    
    return items
}